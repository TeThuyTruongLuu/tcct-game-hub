//Khai b√°o c√°c bi·∫øn (B·∫£ng, tile, time, score, level, nh·∫°c)
//B·∫£ng + tileSize
let boardSize = { rows: 6, cols: 9 };
let tileSize = window.innerWidth < 700 ? window.innerWidth * 0.1 : 80; 
let board = [];
let firstPick = null;
let secondPick = null;

let timer;
let timerPaused = false;
let timeElapsed = 0;
let timeLeft = 120;
let playerScore = 0;
let currentLevel = 0;
let isYouTubePlaying = false;
let shuffleCount = currentLevel === 0 ? 3 : 10;

//Khai b√°o c√°c h·∫±ng (·∫¢nh, b·∫£ng, setting, nh·∫°c, levels)
const imageFolderPath = "../matching_game/images/";
const imageNames = [
    "C√° D·ª• 1.png", "C√°o Di·ªáp 1.png", "C√°o tuy·∫øt Lam 1.png", "Cao.png", "Chu.png", "Chung.png",
    "Chu·ªôt Du·ªá 1.png", "Corgi L∆∞ 1.png", "C√∫ An 1.png", "C√∫n b·ª± Bao 1.png", "C√∫n La 1.png", 
    "C·ª•t Chu 1.png", "Di·ªáp.png", "ƒê·ªõi.png", "D·ª• 2.png", "Du·ªá.png", "Giang.png", "H·∫°.png", 
    "H·∫£i ly Quan 1.png", "Hamster Tranh 1.png", "H√†n.png", "H·ªï con T·ªëng 1.png", "H·ªï H√†n 1.png", 
    "H·ªï tr·∫Øng L√¢u 1.png", "Ho√†ng.png", "Kh∆∞u.png", "Ki·ªÅu.png", "L·∫°c.png", "Lam.png", "L√¢m.png",
    "L√£o c·∫©u Ng·ª•y 1.png", "L√¢u.png", "Linh mi√™u b·ª± Ph∆∞∆°ng 1.png", "L∆∞.png", "L√Ω.png", "M√®o Nhu 1.png"
];

const gameBoard = document.getElementById("game-board");
const settingsBtn = document.getElementById("settings-btn");
const settingsModal = document.getElementById("settings-modal");
const closeSettings = document.getElementById("close-settings");
const musicSelect = document.getElementById("music-select");
const youtubeInput = document.getElementById("youtube-link");
const playButton = document.getElementById("play-music");
const stopButton = document.getElementById("stop-music");
const bgMusic = document.getElementById("background-music");
const musicSource = document.getElementById("music-source");
const youtubePlayer = document.getElementById("youtube-player");

const levels = [
    { rows: 6, cols: 9, tileSize: window.innerWidth < 700 ? window.innerWidth * 0.1 : 80 }, // Level 1
    { rows: 9, cols: 12, tileSize: window.innerWidth < 700 ? window.innerWidth * 0.01 : 10 } // Level Max
];


//Window called
window.onload = function () {
    let savedLevel = localStorage.getItem("savedLevel");
    let savedScore = localStorage.getItem("savedScore");

    if (savedLevel !== null) {
        loadLevel(parseInt(savedLevel));
        playerScore = savedScore ? parseInt(savedScore) : 0;
        updateScoreUI();
        localStorage.removeItem("savedLevel"); // ‚úÖ Ch·ªâ x√≥a savedLevel, gi·ªØ savedScore
    } else {
        loadLevel(0);
    }
	
	adjustSettingsButton();
};

window.addEventListener("resize", () => {
    tileSize = window.innerWidth < 700 ? window.innerWidth * 0.1 : 80; 
	
	adjustSettingsButton();
    createBoard(); 
	assignImages();
});

window.addEventListener("beforeunload", async function (event) {
    if (playerScore > 0) {
        console.log("üî• Ng∆∞·ªùi ch∆°i tho√°t game, l∆∞u ƒëi·ªÉm tr∆∞·ªõc...");
        event.preventDefault(); // Ch·∫∑n ƒë√≥ng tab ngay l·∫≠p t·ª©c
        event.returnValue = "D·ªØ li·ªáu ƒëang ƒë∆∞·ª£c l∆∞u..."; // Hi·ªÉn th·ªã c·∫£nh b√°o tho√°t
        await saveScoreToDB("N·ªëi h√¨nh", playerScore); // ƒê·ª£i Firestore l∆∞u ƒëi·ªÉm xong
    }
});

//Setting button + Musics
settingsBtn.addEventListener("click", () => { //Open setting
    settingsModal.style.display = "flex";
    clearInterval(timer);
    timerPaused = true;
});

closeSettings.addEventListener("click", () => { //Close setting
    settingsModal.style.display = "none";
    if (timerPaused) {
        startTimer();
        timerPaused = false;
    }
});

function adjustSettingsButton() { //CƒÉn ch·ªânh v·ªã tr√≠ n√∫t
    const settingsBtn = document.getElementById("settings-btn");
    const gameTitle = document.querySelector("h1");
    const gameBoard = document.getElementById("game-board");

    if (!settingsBtn || !gameTitle || !gameBoard) return;

    const titleRect = gameTitle.getBoundingClientRect();
    const boardRect = gameBoard.getBoundingClientRect();

    settingsBtn.style.position = "absolute";
    settingsBtn.style.top = `${titleRect.top}px`;
    settingsBtn.style.right = `${window.innerWidth - boardRect.right}px`;
}

musicSelect.addEventListener("change", () => { //ƒê·ªïi nh·∫°c
    if (musicSelect.value === "custom") {
        youtubeInput.style.display = "inline-block";
    } else {
        youtubeInput.style.display = "none";
    }
});

function playMusic() { //Ph√°t nh·∫°c
    if (musicSelect.value === "custom") {
        let youtubeUrl = youtubeInput.value.trim();
        if (youtubeUrl) {
			let { videoId, playlistId } = extractYouTubeID(youtubeUrl);
			let embedUrl = "";

			if (playlistId) {
				// ‚úÖ Ph√°t c·∫£ playlist, t·ª± ƒë·ªông chuy·ªÉn b√†i
				embedUrl = `https://www.youtube.com/embed/videoseries?list=${playlistId}&autoplay=1&loop=1&playlist=${playlistId}&enablejsapi=1`;
			} else if (videoId) {
				// ‚úÖ Ph√°t m·ªôt video duy nh·∫•t
				embedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=1&loop=1&playlist=${videoId}&enablejsapi=1`;
			} else {
				alert("Link YouTube kh√¥ng h·ª£p l·ªá!");
				return;
			}
        } else {
            alert("Vui l√≤ng nh·∫≠p link YouTube!");
        }
    } else {
        let selectedMusic = "musics/" + musicSelect.value;
        musicSource.src = selectedMusic;
        bgMusic.load();
        bgMusic.play();
        youtubePlayer.style.display = "none";
		youtubePlayer.setVolume(50);
        isYouTubePlaying = false;
    }
}

function stopMusic() { //D·ª´ng nh·∫°c
    bgMusic.pause();
    bgMusic.currentTime = 0;
    youtubePlayer.src = "";
    youtubePlayer.style.display = "none";
    isYouTubePlaying = false;
}

function extractYouTubeID(youtubeUrl) { // L·∫•y Video ID & Playlist ID
    const videoRegex = /(?:https?:\/\/)?(?:www\.)?(youtube\.com\/.*[?&]v=|youtu\.be\/)([a-zA-Z0-9_-]+)/;
    const playlistRegex = /[?&]list=([a-zA-Z0-9_-]+)/;

    const videoMatch = youtubeUrl.match(videoRegex);
    const playlistMatch = youtubeUrl.match(playlistRegex);

    const videoId = videoMatch ? videoMatch[2] : null;
    const playlistId = playlistMatch ? playlistMatch[1] : null;

    return { videoId, playlistId };
}


playButton.addEventListener("click", playMusic);
stopButton.addEventListener("click", stopMusic);


//Timer
function updateTimerUI() { //UI hi·ªÉn th·ªã
    let minutes = Math.floor(timeLeft / 60);
    let seconds = timeLeft % 60;
    document.getElementById("timer").textContent = `${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;
}

function startTimer() {
    stopTimer();

    if (currentLevel === 0) { // Level 1: ƒê·∫øm ng∆∞·ª£c
        document.getElementById("timer").textContent = "2:00";
        timer = setInterval(() => {
            timeLeft--;
            updateTimerUI();
            if (timeLeft <= 0) {
                clearInterval(timer);
                handleGameLoss();
            }
        }, 1000);
    } else { // Level Max: ƒê·∫øm l√™n
        timeElapsed = 0;
        document.getElementById("timer").textContent = "0:00";
        timer = setInterval(() => {
            timeElapsed++;
            let minutes = Math.floor(timeElapsed / 60);
            let seconds = timeElapsed % 60;
            document.getElementById("timer").textContent = `${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;
        }, 1000);
    }
}

function stopTimer() { //Stop timer
    clearInterval(timer);
}


//Board + Tiles + Load levels
function createBoard() {
    gameBoard.innerHTML = "";
    gameBoard.style.display = "grid";
    gameBoard.style.gridTemplateColumns = `repeat(${boardSize.cols}, ${tileSize}px)`;
    gameBoard.style.gridTemplateRows = `repeat(${boardSize.rows}, ${tileSize}px)`;
        
    for (let row = 0; row < boardSize.rows; row++) {
        board[row] = [];
        for (let col = 0; col < boardSize.cols; col++) {
            const tile = document.createElement("div");
            tile.classList.add("tile");
			tile.dataset.row = row;
            tile.dataset.col = col;
                
            if (row === 0 || row === boardSize.rows - 1 || col === 0 || col === boardSize.cols - 1) {
                tile.classList.add("hidden");
                board[row][col] = { element: tile, x: col * tileSize + tileSize / 2, y: row * tileSize + tileSize / 2, hidden: true };
            } else {

                const centerX = col * tileSize + tileSize / 2;
                const centerY = row * tileSize + tileSize / 2;
                board[row][col] = { element: tile, x: centerX, y: centerY, hidden: false };
                    
                const img = document.createElement("img");
                img.style.width = "100%";
                img.style.height = "100%";
                tile.appendChild(img);
                    
                tile.addEventListener("click", () => handleTileClick(row, col));
            }
            gameBoard.appendChild(tile);
        }
    }
}

function assignImages() {
    let validTiles = [];
    for (let row = 1; row < boardSize.rows - 1; row++) {
        for (let col = 1; col < boardSize.cols - 1; col++) {
            validTiles.push({ row, col });
        }
    }

    let selectedImages = imageNames.slice(0, validTiles.length / 2);
    let shuffledImages = [...selectedImages, ...selectedImages];
    shuffledImages = shuffledImages.sort(() => Math.random() - 0.5);

    validTiles.forEach((tile, index) => {
        let img = document.createElement("img");
        img.src = imageFolderPath + shuffledImages[index];
        img.style.width = "100%";
        img.style.height = "100%";

        board[tile.row][tile.col].element.appendChild(img);
        board[tile.row][tile.col].element.dataset.pairId = shuffledImages[index]; // G√°n ID c·∫∑p h√¨nh ·∫£nh
    });
}

function loadLevel(levelIndex) {
    if (levelIndex >= levels.length) {
        alert("üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh to√†n b·ªô game!");
        return;
    }

    currentLevel = levelIndex;
    boardSize = {
        rows: levels[levelIndex].rows,
        cols: levels[levelIndex].cols
    };
    tileSize = levels[levelIndex].tileSize;

    document.getElementById("level").textContent = levelIndex === 1 ? "Max" : levelIndex + 1;

    shuffleCount = currentLevel === 0 ? 3 : 10; // C·∫≠p nh·∫≠t s·ªë l·∫ßn shuffle khi load level
    updateShuffleButton(); // C·∫≠p nh·∫≠t giao di·ªán shuffle

    document.getElementById("game-board").style.gridTemplateColumns = `repeat(${boardSize.cols}, ${tileSize}px)`;

    createBoard();
    assignImages();

    stopTimer();
    if (currentLevel === 0) {
        timeLeft = 120;
    } else {
		alert("B·∫°n n√™n xoay ngang m√†n h√¨nh v√† reset game tr∆∞·ªõc khi ch∆°i m√†n n√†y tr√™n ƒët!");
        timeElapsed = 0;
        document.getElementById("timer").textContent = "0:00";
    }
    startTimer();
}


//X·ª≠ l√Ω n∆∞·ªõc ƒëi - Part 1 (Click => T√¨m tiles k·ªÅ c·∫≠n => Check valid c·ªßa tiles & Check border)
function handleTileClick(row, col) {
    const selectedTile = board[row][col];
    if (!firstPick) {
        firstPick = selectedTile;
        firstPick.element.classList.add("selected");
    } else if (!secondPick) {
        secondPick = selectedTile;
        secondPick.element.classList.add("selected");

        // N·∫øu hai √¥ kh√¥ng ph·∫£i c·∫∑p gi·ªëng nhau, b·ªè ch·ªçn
        if (firstPick.element.dataset.pairId !== secondPick.element.dataset.pairId) {
            setTimeout(clearSelection, 500);
            return;
        }

        // N·∫øu l√† c·∫∑p gi·ªëng nhau v√† c√≥ ƒë∆∞·ªùng n·ªëi h·ª£p l·ªá
        const path = findPath(firstPick, secondPick);
        if (path) {
            drawConnection(path);
            setTimeout(removeMatchedTiles, 1000);
        } else {
            setTimeout(clearSelection, 500);
        }
    }
}

function getValidNeighbors(row, col) {
    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]; // C√°c h∆∞·ªõng: l√™n, xu·ªëng, tr√°i, ph·∫£i
    let neighbors = [];

    for (let [dr, dc] of directions) {
        let nr = row + dr;
        let nc = col + dc;

        // Ki·ªÉm tra xem t·ªça ƒë·ªô c√≥ h·ª£p l·ªá kh√¥ng
        if (nr >= 0 && nr < boardSize.rows && nc >= 0 && nc < boardSize.cols) {
            let neighborTile = board[nr][nc];

            // üî¥ Ch·ªâ cho ph√©p ƒëi qua √¥ b·ªã ·∫©n ho·∫∑c √¥ vi·ªÅn ngo√†i
            if (neighborTile.hidden || isBorderTile(nr, nc)) {
                neighbors.push([nr, nc]); 
            }
        }
    }

    console.log(`Neighbors for (${row}, ${col}):`, neighbors);
    return neighbors;
}

function isValidTile(row, col) {
    if (row < 0 || col < 0 || row >= boardSize.rows || col >= boardSize.cols) return false;
    let tile = board[row][col];

    // Ch·ªâ ƒëi qua √¥ b·ªã ·∫©n, √¥ vi·ªÅn ngo√†i ho·∫∑c hai √¥ ƒëang ch·ªçn
    return tile.hidden || isBorderTile(row, col) || tile === firstPick || tile === secondPick;
}

function isBorderTile(row, col) {
    return row === 0 || row === boardSize.rows - 1 || col === 0 || col === boardSize.cols - 1;
}


//Part 2: T√¨m ƒë∆∞·ªùng (Ng·∫Øn nh·∫•t & Kh√¥ng qua unvalid tiles)
function findPath(tile1, tile2) {
    console.log("Checking path between", tile1, tile2);
    
    if (tile1 === tile2) return null;
    if (tile1.hidden || tile2.hidden) return null;
    if (tile1.element.dataset.pairId !== tile2.element.dataset.pairId) return null;

    // N·∫øu hai √¥ k·ªÅ nhau, g·ªçi v·∫Ω ƒë∆∞·ªùng n·ªëi tr∆∞·ªõc khi return
    if ((Math.abs(tile1.x - tile2.x) === tileSize && tile1.y === tile2.y) || 
        (Math.abs(tile1.y - tile2.y) === tileSize && tile1.x === tile2.x)) {
        console.log("Tiles are adjacent, direct path found!");
        let directPath = [[tile1.element.dataset.row, tile1.element.dataset.col], 
                          [tile2.element.dataset.row, tile2.element.dataset.col]];
        drawConnection(directPath); // üî• G·ªçi v·∫Ω tr∆∞·ªõc khi return
        return directPath;
    }

    let path = getShortestPath(tile1, tile2);
    console.log("Path found:", path);

    if (path && path.length > 1) {
        drawConnection(path); // üî• ƒê·∫£m b·∫£o v·∫Ω path tr∆∞·ªõc khi return
        return path;
    }

    console.log("No valid path found.");
    return null;
}

function getShortestPath(tile1, tile2) {
    let startRow = parseInt(tile1.element.dataset.row);
    let startCol = parseInt(tile1.element.dataset.col);
    let endRow = parseInt(tile2.element.dataset.row);
    let endCol = parseInt(tile2.element.dataset.col);

    let queue = [[startRow, startCol, [], 0]];
    let visited = new Set();
    visited.add(`${startRow},${startCol}`);

    while (queue.length > 0) {
        let [row, col, path, turns] = queue.shift();
        let newPath = [...path, [row, col]];

        console.log(`Checking path from (${row}, ${col}) to (${endRow}, ${endCol})`);

        if (row === endRow && col === endCol) {
            console.log("Path found:", newPath);
            return newPath;
        }

        let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]; // Ch·ªâ ƒëi l√™n, xu·ªëng, tr√°i, ph·∫£i
        for (let [dr, dc] of directions) {
            let nr = row + dr;
            let nc = col + dc;

            if (nr < 0 || nr >= boardSize.rows || nc < 0 || nc >= boardSize.cols) continue; // B·ªè qua √¥ ngo√†i bi√™n

            if (!isValidTile(nr, nc)) continue; // üî• Ch·ªâ ƒëi qua √¥ h·ª£p l·ªá

            let newTurns = turns;

            // Ki·ªÉm tra n·∫øu g·∫•p kh√∫c
            if (path.length > 0) {
                let [pr, pc] = path[path.length - 1];
                if ((pr !== nr && pc !== nc)) {
                    newTurns++;
                }
            }

            // Ch·ªâ cho ph√©p t·ªëi ƒëa 2 l·∫ßn g·∫•p kh√∫c
            if (!visited.has(`${nr},${nc}`) && newTurns <= 2) {
                queue.push([nr, nc, newPath, newTurns]);
                visited.add(`${nr},${nc}`);
            }
        }
    }

    console.log("No valid path found.");
    return null;
}

function pathIntersectsOnlyHiddenTiles(path) {
    for (let i = 1; i < path.length - 1; i++) {
        let [px, py] = path[i];
		console.log("Checking path intersection at", px, py);
        for (let row = 0; row < boardSize.rows; row++) {
            for (let col = 0; col < boardSize.cols; col++) {
                let tile = board[row][col];
                if (tile && !tile.hidden && tile.x === px && tile.y === py) {
					console.log("Path intersects invalid tile at", px, py);
                    return false;
                }
            }
        }
    }
    return true;
}


//Part 3: V·∫Ω ƒë∆∞·ªùng (Level 1, level max)
function drawConnection(path) {
    let lineContainer = document.createElement("div");
    lineContainer.classList.add("line-container");
    document.body.appendChild(lineContainer);

    let boardRect = gameBoard.getBoundingClientRect();

    for (let i = 0; i < path.length - 1; i++) {
        let [row1, col1] = path[i];
        let [row2, col2] = path[i + 1];

        let tile1 = board[row1][col1].element.getBoundingClientRect();
        let tile2 = board[row2][col2].element.getBoundingClientRect();

        let x1 = ((tile1.left + tileSize / 2) / window.innerWidth) * 100;
        //let y1 = ((tile1.top + tileSize / 2 + boardRect.top*3) / window.innerWidth) * 100;
		let y1 = ((tile1.top + tileSize / 2 + (window.innerWidth < 700 ? boardRect.top*0.04 : boardRect.top * 3)) / window.innerWidth) * 100;
        let x2 = ((tile2.left + tileSize / 2) / window.innerWidth) * 100;
        //let y2 = ((tile2.top + tileSize / 2 + boardRect.top*3) / window.innerWidth) * 100;
		let y2 = ((tile2.top + tileSize / 2 + (window.innerWidth < 700 ? boardRect.top*0.04 : boardRect.top * 3)) / window.innerWidth) * 100;

		
		//let tileSize = window.innerWidth < 700 ? window.innerWidth * 0.1 : 80;

        let line = document.createElement("div");
        line.classList.add("line");

        if (row1 === row2) { // ƒê∆∞·ªùng ngang
            line.style.width = `${Math.abs(x2 - x1)}vw`;
            line.style.height = "0.4vw";
            line.style.left = `${Math.min(x1, x2)}vw`;
            line.style.top = `${y1 - 0.35}vw`;
        } else if (col1 === col2) { // ƒê∆∞·ªùng d·ªçc
            line.style.width = "0.4vw";
            line.style.height = `${Math.abs(y2 - y1)}vw`;
            line.style.left = `${x1 - 0.35}vw`;
            line.style.top = `${Math.min(y1, y2)}vw`;
        }

        lineContainer.appendChild(line);
    }

    setTimeout(() => lineContainer.remove(), 1000);
} 

function drawConnectionUpdated(path) {
    let lineContainer = document.createElement("div");
    lineContainer.classList.add("line-container");
    document.body.appendChild(lineContainer);

    let boardRect = gameBoard.getBoundingClientRect();

    for (let i = 0; i < path.length - 1; i++) {
        let [row1, col1] = path[i];
        let [row2, col2] = path[i + 1];

        let tile1 = board[row1][col1].element.getBoundingClientRect();
        let tile2 = board[row2][col2].element.getBoundingClientRect();

        let x1 = ((tile1.left + tileSize / 2) / window.innerWidth) * 100;
        let y1 = ((tile1.top + tileSize / 2 + boardRect.top*4.5) / window.innerWidth) * 100;
        let x2 = ((tile2.left + tileSize / 2) / window.innerWidth) * 100;
        let y2 = ((tile2.top + tileSize / 2 + boardRect.top*4.5) / window.innerWidth) * 100;
		

        let line = document.createElement("div");
        line.classList.add("line");

        if (row1 === row2) { // ƒê∆∞·ªùng ngang
            line.style.width = `${Math.abs(x2 - x1)}vw`;
            line.style.height = "0.3vw";
            line.style.left = `${Math.min(x1, x2)}vw`;
            line.style.top = `${y1 - 0.35}vw`;
        } else if (col1 === col2) { // ƒê∆∞·ªùng d·ªçc
            line.style.width = "0.4vw";
            line.style.height = `${Math.abs(y2 - y1)}vw`;
            line.style.left = `${x1 - 0.35}vw`;
            line.style.top = `${Math.min(y1, y2)}vw`;
        }

        lineContainer.appendChild(line);
    }

    setTimeout(() => lineContainer.remove(), 1000);
} 


//Part 4: X√≥a match, x√≥a select, update v·ªã tr√≠ tile
function removeMatchedTiles() {
    firstPick.element.classList.add("hidden");
    secondPick.element.classList.add("hidden");
    firstPick.element.innerHTML = "";
    secondPick.element.innerHTML = "";
    board[firstPick.element.dataset.row][firstPick.element.dataset.col].hidden = true;
    board[secondPick.element.dataset.row][secondPick.element.dataset.col].hidden = true;
	
	updateScore();
    clearSelection();
	
/*     setTimeout(() => {
        if (checkAnyValidMove()) {
            console.log("‚ö†Ô∏è Kh√¥ng c√≤n n∆∞·ªõc ƒëi h·ª£p l·ªá! Shuffle l·∫°i b·∫£ng.");
            shuffleBoard();
        }
    }, 500); */
	
	checkGameOver();
}

function clearSelection() {
    if (firstPick) firstPick.element.classList.remove("selected");
    if (secondPick) secondPick.element.classList.remove("selected");
    firstPick = null;
    secondPick = null;
}

function updateTilePositions() {
    let boardRect = gameBoard.getBoundingClientRect();

    for (let row = 1; row < boardSize.rows - 1; row++) {
        for (let col = 1; col < boardSize.cols - 1; col++) {
            let tile = board[row][col];

            if (!tile.hidden) {
                let tileRect = tile.element.getBoundingClientRect();
                tile.x = ((tileRect.left + tileSize / 2) - boardRect.left) / window.innerWidth * 100;
                tile.y = ((tileRect.top + tileSize / 2) + boardRect.top) / window.innerHeight * 100;
            }
        }
    }
    console.log("üìå Tile positions updated.");
}


//Part 5: C·ªông ƒëi·ªÉm, check game over
function updateScoreUI() {
    document.getElementById("score").textContent = playerScore;
}

function updateScore() {
    if (currentLevel === 0) {
        playerScore += 10; // Level 1: M·ªói c·∫∑p +10 ƒëi·ªÉm
    } else {
        playerScore += 1; // Level Max: M·ªói c·∫∑p +1 ƒëi·ªÉm
    }
    updateScoreUI();
	saveScoreToDB("N·ªëi h√¨nh", playerScore);
}

function checkIfAllTilesMatched() {
    for (let row = 1; row < boardSize.rows - 1; row++) {
        for (let col = 1; col < boardSize.cols - 1; col++) {
            let tile = board[row][col];
            if (!tile.hidden) {
                return false;
            }
        }
    }
    return true; // T·∫•t c·∫£ c√°c √¥ ƒë√£ b·ªã ·∫©n (ƒë√£ gh√©p h·∫øt c√°c c·∫∑p)
}

function checkGameOver() {   
    if (checkIfAllTilesMatched()) {
        stopTimer();
        let bonus = (currentLevel === 0) ? timeLeft : Math.max(0, 1000 - timeElapsed);
        playerScore += bonus;
        updateScoreUI();
        alert(`üéâ H·∫øt game! B·∫°n nh·∫≠n ƒë∆∞·ª£c ${bonus} ƒëi·ªÉm th∆∞·ªüng. T·ªïng ƒëi·ªÉm: ${playerScore}`);
        
        if (currentLevel === 0) {
            localStorage.setItem("savedLevel", 1);
            localStorage.setItem("savedScore", playerScore);
            loadLevel(1);
        } else {
            alert("üéâ B·∫°n ƒë√£ ho√†n th√†nh to√†n b·ªô game!");
        }
    }
}

function handleGameLoss() {
    alert("‚è≥ H·∫øt gi·ªù! B·ªì thua r·ªìi. Ch∆°i l·∫°i nha.");
    resetGameAfterLoss();
}

function resetGameAfterLoss() {
    stopTimer(); // D·ª´ng b·∫•t k·ª≥ timer n√†o ƒëang ch·∫°y
    currentLevel = 0;
    playerScore = 0;
    timeLeft = 120;
    shuffleCount = 3; // Reset s·ªë l·∫ßn shuffle v·ªÅ m·∫∑c ƒë·ªãnh
    updateShuffleButton();
    updateScoreUI();
    updateTimerUI();
    loadLevel(0);
}


//X·ª≠ l√Ω c√°c n√∫t
//Shuffle (Nh·∫•n n√∫t => Check √¥, check xem shuff xong c√≥ ƒë∆∞·ªùng kh√¥ng)
function updateShuffleButton() {
    document.getElementById("shuffle-button").textContent = `X√°o h√¨nh (${shuffleCount})`;
}

function shuffleBoard() {
    if (shuffleCount <= 0) {
        console.log("‚ö†Ô∏è H·∫øt l∆∞·ª£t x√°o h√¨nh!");
        return;
    }

    // üî• Tr·ª´ s·ªë l·∫ßn shuffle NGAY KHI b·∫•m n√∫t, b·∫•t k·ªÉ th√†nh c√¥ng hay kh√¥ng
    shuffleCount--; 
    updateShuffleButton();

    let visibleTiles = [];

    // ‚úÖ L·∫•y t·∫•t c·∫£ c√°c √¥ ch∆∞a b·ªã ·∫©n
    for (let row = 1; row < boardSize.rows - 1; row++) {
        for (let col = 1; col < boardSize.cols - 1; col++) {
            let tile = board[row][col];
            if (!tile.hidden) {
                visibleTiles.push(tile);
            }
        }
    }

    if (visibleTiles.length < 2) {
        console.log("‚ö†Ô∏è Kh√¥ng ƒë·ªß tiles ƒë·ªÉ shuffle!");
        return;
    }

    let shuffled = false;
    let attempts = 0;

    while (!shuffled && attempts < 10) {
        attempts++;

        let images = visibleTiles.map(tile => tile.element.dataset.pairId);
        images.sort(() => Math.random() - 0.5);

        visibleTiles.forEach((tile, index) => {
            tile.element.innerHTML = "";
            let img = document.createElement("img");
            img.src = imageFolderPath + images[index];
            img.style.width = "100%";
            img.style.height = "100%";
            img.style.objectFit = "contain";

            tile.element.appendChild(img);
            tile.element.dataset.pairId = images[index];
        });

        if (checkAnyValidMove()) {
            shuffled = true;
        }
    }

//    updateTilePositions();

    if (shuffled) {
        console.log(`‚úÖ Shuffle th√†nh c√¥ng! S·ªë l·∫ßn shuffle c√≤n l·∫°i: ${shuffleCount}`);
    } else {
        console.log("‚ö†Ô∏è Shuffle th·∫•t b·∫°i, kh√¥ng c√≥ ƒë∆∞·ªùng ƒëi h·ª£p l·ªá sau 10 l·∫ßn th·ª≠.");
    }
}

function checkPathOnly(tile1, tile2) {
    console.log("Checking possible path between", tile1, tile2);

    if (tile1 === tile2) return null;
    if (tile1.hidden || tile2.hidden) return null;
    if (tile1.element.dataset.pairId !== tile2.element.dataset.pairId) return null;

    // ‚úÖ N·∫øu hai √¥ k·ªÅ nhau, xem nh∆∞ c√≥ ƒë∆∞·ªùng h·ª£p l·ªá
    if ((Math.abs(tile1.x - tile2.x) === tileSize && tile1.y === tile2.y) || 
        (Math.abs(tile1.y - tile2.y) === tileSize && tile1.x === tile2.x)) {
        return true;
    }

    // ‚úÖ Ki·ªÉm tra ƒë∆∞·ªùng h·ª£p l·ªá nh∆∞ng kh√¥ng v·∫Ω line
    let path = getShortestPath(tile1, tile2);
    return path && path.length > 1;
}

function checkAnyValidMove() {
    let tiles = [];

    // ‚úÖ L·∫•y t·∫•t c·∫£ c√°c √¥ h·ª£p l·ªá tr√™n b·∫£ng
    for (let row = 1; row < boardSize.rows - 1; row++) {
        for (let col = 1; col < boardSize.cols - 1; col++) {
            let tile = board[row][col];
            if (!tile.hidden) {
                tiles.push(tile);
            }
        }
    }

    // ‚úÖ Ki·ªÉm tra xem c√≥ c·∫∑p √¥ n√†o c√≥ th·ªÉ n·ªëi hay kh√¥ng
    for (let i = 0; i < tiles.length; i++) {
        for (let j = i + 1; j < tiles.length; j++) {
            if (tiles[i].element.dataset.pairId === tiles[j].element.dataset.pairId) {
                if (checkPathOnly(tiles[i], tiles[j])) {
                    return true;
                }
            }
        }
    }

    return false;
}

document.getElementById("shuffle-button").addEventListener("click", shuffleBoard);

//Reset
function resetGame() {
    stopTimer();

    if (currentLevel === 0) { // Level 1: Reset v·ªÅ m·∫∑c ƒë·ªãnh
        playerScore = 0;
        timeLeft = 120;
		loadLevel(0);
    } else { // Level Max: Gi·ªØ ƒëi·ªÉm c·ªßa Level 1, reset th·ªùi gian v·ªÅ 0
        let savedScore = localStorage.getItem("savedScore");
        playerScore = savedScore ? parseInt(savedScore) : 0;
        timeElapsed = 0;
		loadLevel(1);
    }

    updateScoreUI();
    updateTimerUI();

    createBoard();
    assignImages();
    startTimer();
}

document.getElementById("reset-button").addEventListener("click", resetGame);

