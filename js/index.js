document.addEventListener('deviceready', onDeviceReady, false);

function onDeviceReady() {
    // Cordova is now initialized. Have fun!

    console.log('Running cordova-' + cordova.platformId + '@' + cordova.version);
    document.getElementById('deviceready').classList.add('ready');
}

//Load login
document.addEventListener("deviceready", function() {
    document.addEventListener("backbutton", function(e) {
        const loginModal = document.getElementById("login-modal");
        if (loginModal.style.display === "none") {
            e.preventDefault();
            navigator.app.exitApp();
        }
    }, false);
}, false);


// Ki·ªÉm tra Firebase
if (!firebase.apps.length) {
    const firebaseConfig = {
        apiKey: "AIzaSyBtpLSSNBj9lHtzibLh5QSRAPg3iQ46Q3g",
        authDomain: "tcct-minigames.firebaseapp.com",
        projectId: "tcct-minigames",
        storageBucket: "tcct-minigames.firebasestorage.app",
        messagingSenderId: "604780847536",
        appId: "1:604780847536:web:f8015bde5ef469b04c7675",
        measurementId: "G-1GGDZR6VY5"
    };

    firebase.initializeApp(firebaseConfig);
    console.log("üî• Firebase ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o!");
}

// L·∫•y Firestore
const db = firebase.firestore();

//Ki·ªÉm tra ƒëi·ªÅu ki·ªán log-in, log-out
document.addEventListener("DOMContentLoaded", function () {
    console.log("üî• DOM ƒë√£ load xong!");

    const savedUsername = localStorage.getItem("username");
    const startButton = document.getElementById("start-button");
    const playWithoutLoginButton = document.getElementById("play-without-login");
    const codeInput = document.getElementById("code-input");
    const nicknameInput = document.getElementById("nickname-input");
    const tabButtons = document.querySelectorAll(".tab-btn");
    const leaderboardContent = document.getElementById("leaderboard-content");

    if (savedUsername) {
        console.log(`üîÑ T·ª± ƒë·ªông ƒëƒÉng nh·∫≠p: ${savedUsername}`);
        document.getElementById("login-modal").style.display = "none";
        document.getElementById("welcome-message").style.display = "block";
        document.getElementById("display-name").innerText = savedUsername;
        document.getElementById("logout-button").style.display = "block";

        document.querySelector(".points").style.display = "block";
        document.querySelector(".scoreboard-container").style.display = "flex";
        document.querySelector(".game-list").style.display = "grid";
        document.getElementById("scoreboard").style.display = "block";
		document.getElementById("character-callout").style.display = "flex";
		document.getElementById("settings-btn").style.display = "block";
        updateTotalScore();
    }

    if (startButton) {
        startButton.addEventListener("click", async () => {
            const codeInputValue = document.getElementById("code-input").value.trim();
            const nicknameInputValue = document.getElementById("nickname-input").value.trim();

            if (codeInputValue !== "TCCT" || !nicknameInputValue) {
                alert("Nh·∫≠p ƒë√∫ng m√£ 'TCCT' v√† ƒëi·ªÅn t√™n h·ª£p l·ªá nha b·ªì ∆°i.");
                return;
            }

            console.log(`üìå ƒêƒÉng nh·∫≠p v·ªõi t√™n: ${nicknameInputValue}`);

            const userRef = db.collection("users").doc(nicknameInputValue);
            const userDoc = await userRef.get();

            if (userDoc.exists) {
                alert(`Ch√†o m·ª´ng tr·ªü l·∫°i, ${nicknameInputValue}!`);
            } else {
                await userRef.set({ username: nicknameInputValue });
                alert(`T·∫°o t√†i kho·∫£n th√†nh c√¥ng! Xin ch√†o, ${nicknameInputValue}.`);
            }

            localStorage.setItem("username", nicknameInputValue);

            document.getElementById("login-modal").style.display = "none";
            document.getElementById("welcome-message").style.display = "block";
            document.getElementById("display-name").innerText = nicknameInputValue;
            document.getElementById("logout-button").style.display = "block";

            document.querySelector(".points").style.display = "block";
            document.querySelector(".scoreboard-container").style.display = "flex";
            document.querySelector(".game-list").style.display = "grid";
            document.getElementById("scoreboard").style.display = "block";
			document.getElementById("character-callout").style.display = "flex";
			document.getElementById("settings-btn").style.display = "block";

            updateTotalScore();
        });
    }

    // üéØ Khi nh·∫•n Enter trong input => Click v√†o n√∫t "V√†o game"
    function handleEnterKey(event) {
        if (event.key === "Enter" && startButton) {
            startButton.click();
        }
    }

    if (codeInput) codeInput.addEventListener("keydown", handleEnterKey);
    if (nicknameInput) nicknameInput.addEventListener("keydown", handleEnterKey);

    if (playWithoutLoginButton) {
        playWithoutLoginButton.addEventListener("click", () => {
            console.log("üéÆ Ch·∫ø ƒë·ªô ch∆°i ·∫©n danh");

            document.getElementById("login-modal").style.display = "none";
            document.querySelector(".game-list").style.display = "grid";
            document.querySelector(".points").style.display = "none";
            document.querySelector(".scoreboard-container").style.display = "none";
            document.getElementById("scoreboard").style.display = "none";
            document.getElementById("logout-button").style.display = "none";
			document.getElementById("character-callout").style.display = "flex";
			document.getElementById("settings-btn").style.display = "block";

            alert("B·ªì ƒëang ch∆°i m√† kh√¥ng ƒëƒÉng nh·∫≠p, ƒëi·ªÉm s·ªë s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u!");
        });
    }

    // üéØ X·ª≠ l√Ω chuy·ªÉn ƒë·ªïi gi·ªØa c√°c game trong b·∫£ng k·ª∑ l·ª•c
    tabButtons.forEach((btn) => {
        btn.addEventListener("click", function () {
            tabButtons.forEach((btn) => btn.classList.remove("active"));
            this.classList.add("active");

            const game = this.getAttribute("data-game");
            loadLeaderboard(game);
        });
    });

	loadLeaderboard();
	adjustSettingsButton();
});

function logout() {
    localStorage.removeItem("username");
    location.reload();
}


//L∆∞u ƒëi·ªÉm
async function saveScoreToDB(game, newScore) {
    const username = localStorage.getItem("username");
    if (!username) {
        alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p, ƒëi·ªÉm s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u!");
        return;
    }

    const scoreDocId = `${username}-${game}`; // üî• T·∫°o ID duy nh·∫•t cho m·ªói user-game
    const scoreRef = firebase.firestore().collection("userScores").doc(scoreDocId);

    try {
        const docSnapshot = await scoreRef.get();
        if (!docSnapshot.exists) {
            // üî• N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu, t·∫°o m·ªõi
            await scoreRef.set({
                username: username,
                game: game,
                score: newScore,
                updatedAt: new Date().toISOString()
            });
            console.log(`üÜï T·∫°o ƒëi·ªÉm m·ªõi: ${username} - ${game}: ${newScore}`);
        } else {
            const oldScore = docSnapshot.data().score;
            if (newScore > oldScore) {
                // üî• N·∫øu ƒëi·ªÉm m·ªõi cao h∆°n ƒëi·ªÉm c≈©, ghi ƒë√® l√™n
                await scoreRef.update({
                    score: newScore,
                    updatedAt: new Date().toISOString()
                });
                console.log(`‚úÖ C·∫≠p nh·∫≠t ƒëi·ªÉm: ${username} - ${game}: ${newScore}`);
            } else {
                console.log("‚ö†Ô∏è ƒêi·ªÉm m·ªõi kh√¥ng cao h∆°n ƒëi·ªÉm c≈©, kh√¥ng c·∫≠p nh·∫≠t.");
            }
        }

        // üî• C·∫≠p nh·∫≠t t·ªïng ƒëi·ªÉm sau khi thay ƒë·ªïi ƒëi·ªÉm c·ªßa game
        updateTotalScore();
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªÉm:", error);
    }
}

window.saveScoreToDB = saveScoreToDB;

//Leaderboard + Personal score
let personalScoresVisible = false;
let leaderboardVisible = false;

async function loadLeaderboard(game) {
    const leaderboardContent = document.getElementById("leaderboard-content");

    if (!game) {
        console.error("‚ùå L·ªói: Game kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã undefined.");
        return;
    }

    leaderboardContent.innerHTML = `<h3>B·∫£ng x·∫øp h·∫°ng</h3>`;

    const scoresRef = firebase.firestore().collection("userScores");

    let q;
    if (game === "L·∫≠t h√¨nh") {
        q = scoresRef.where("game", "==", game).orderBy("totalTimeInSeconds", "asc").limit(10); 
    } else {
        q = scoresRef.where("game", "==", game).orderBy("score", "desc").limit(10);
    }

    try {
        const querySnapshot = await q.get();
        
        let html = "";
        if (game === "L·∫≠t h√¨nh") {
            html += `<table><tr><th>Ng∆∞·ªùi ch∆°i</th><th>Th·ªùi gian (s)</th><th>ƒêi·ªÉm</th></tr>`;
        } else {
            html += `<table><tr><th>Ng∆∞·ªùi ch∆°i</th><th>ƒêi·ªÉm</th></tr>`;
        }

        if (querySnapshot.empty) {
            html += `<tr><td colspan="${game === "L·∫≠t h√¨nh" ? 3 : 2}">Ch∆∞a c√≥ d·ªØ li·ªáu</td></tr>`;
        } else {
            querySnapshot.forEach((doc) => {
                const data = doc.data();
                if (game === "L·∫≠t h√¨nh") {
                    html += `<tr><td>${data.username}</td><td>${data.totalTime || "N/A"}</td><td>${data.score}</td></tr>`;
                } else {
                    html += `<tr><td>${data.username}</td><td>${data.score}</td></tr>`;
                }
            });
        }

        html += `</table>`;
        leaderboardContent.innerHTML += html;
    } catch (error) {
        console.error(`‚ùå L·ªói khi t·∫£i b·∫£ng x·∫øp h·∫°ng ${game}:`, error);
    }
}


function formatDate(isoString) {
    const date = new Date(isoString);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0'); // Th√°ng b·∫Øt ƒë·∫ßu t·ª´ 0 n√™n +1
    const year = date.getFullYear();

    return `${day}/${month}/${year}`;
}


async function showPersonalScores() {
    const scoreboard = document.getElementById("scoreboard");

    if (personalScoresVisible) {
        scoreboard.innerHTML = ""; // ·∫®n b·∫£ng ƒëi·ªÉm khi b·∫•m l·∫°i
        personalScoresVisible = false;
        return;
    }

    const username = localStorage.getItem("username");
    if (!username) {
        alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p!");
        return;
    }

    const scoresRef = firebase.firestore().collection("userScores");
    const q = scoresRef.where("username", "==", username).orderBy("score", "desc").limit(10);

    try {
        const querySnapshot = await q.get();
        let html = "<h2>B·∫£ng ƒëi·ªÉm c√° nh√¢n</h2><table><tr><th>Game</th><th>ƒêi·ªÉm cao nh·∫•t</th><th>Th·ªùi gian</th></tr>";

        if (querySnapshot.empty) {
            html += `<tr><td colspan="3">N/A</td></tr>`; // Kh√¥ng c√≥ d·ªØ li·ªáu th√¨ hi·ªÉn th·ªã "N/A"
        } else {
            querySnapshot.forEach((doc) => {
                const data = doc.data();
                const formattedDate = formatDate(data.updatedAt); // Chuy·ªÉn ƒë·ªïi th·ªùi gian

                html += `<tr><td>${data.game}</td><td>${data.score}</td><td>${formattedDate}</td></tr>`;
            });
        }

        html += "</table>";
        scoreboard.innerHTML = html;
        personalScoresVisible = true; // ƒê√°nh d·∫•u b·∫£ng ƒëi·ªÉm ƒëang hi·ªÉn th·ªã
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y b·∫£ng ƒëi·ªÉm c√° nh√¢n:", error);
    }
}


async function showLeaderboard() {
    const leaderboardSection = document.getElementById("leaderboard-section");

    // N·∫øu ƒëang ·∫©n th√¨ hi·ªÉn th·ªã, n·∫øu ƒëang hi·ªÉn th·ªã th√¨ ·∫©n ƒëi
    if (leaderboardSection.style.display === "none") {
        leaderboardSection.style.display = "block";
        loadLeaderboard("2048"); // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã game ƒë·∫ßu ti√™n
    } else {
        leaderboardSection.style.display = "none";
    }
}


async function updateTotalScore() {
    const username = localStorage.getItem("username");
    if (!username) {
        console.warn("‚ö†Ô∏è Ng∆∞·ªùi ch∆°i ch∆∞a ƒëƒÉng nh·∫≠p, kh√¥ng c·∫≠p nh·∫≠t t·ªïng ƒëi·ªÉm.");
        return;
    }

    const scoresRef = firebase.firestore().collection("userScores");
    const q = scoresRef.where("username", "==", username);

    try {
        const querySnapshot = await q.get();
        let totalScore = 0;

        if (querySnapshot.empty) {
            console.log(`‚ö†Ô∏è Ng∆∞·ªùi ch∆°i ${username} ch∆∞a c√≥ ƒëi·ªÉm trong game n√†o.`);
            document.getElementById("user-points").innerText = "N/A";
            return;
        }

        querySnapshot.forEach((doc) => {
            totalScore += doc.data().score; // C·ªông t·ªïng ƒëi·ªÉm c·ªßa t·∫•t c·∫£ game
        });

        console.log(`üî• T·ªïng ƒëi·ªÉm m·ªõi c·ªßa ${username}: ${totalScore}`);
        document.getElementById("user-points").innerText = totalScore;

        // üî• C·∫≠p nh·∫≠t t·ªïng ƒëi·ªÉm v√†o Firestore
        const userRef = firebase.firestore().collection("users").doc(username);
        await userRef.set({ totalScore: totalScore }, { merge: true });

        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t t·ªïng ƒëi·ªÉm v√†o Firestore.`);
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t t·ªïng ƒëi·ªÉm:", error);
    }
}



async function updateOldLeaderboardData() {
    const scoresRef = firebase.firestore().collection("userScores");
    
    try {
        const querySnapshot = await scoresRef.where("game", "==", "L·∫≠t h√¨nh").get();
        let count = 0;

        querySnapshot.forEach(async (doc) => {
            const data = doc.data();

            if (!data.totalTimeInSeconds && data.totalTime) {
                const totalTimeParts = data.totalTime.split(":").map(Number);
                const totalTimeInSeconds = totalTimeParts[0] * 60 + totalTimeParts[1]; // Chuy·ªÉn th√†nh gi√¢y

                await scoresRef.doc(doc.id).update({
                    totalTimeInSeconds: totalTimeInSeconds
                });

                console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${data.username}: ${data.totalTime} ‚Üí ${totalTimeInSeconds}s`);
                count++;
            }
        });

        console.log(`üéâ ƒê√£ c·∫≠p nh·∫≠t xong ${count} b·∫£n ghi.`);
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu:", error);
    }
}

updateOldLeaderboardData();

//N√∫t setting
document.addEventListener("DOMContentLoaded", function () {
    const settingsButton = document.getElementById("settings-btn");
    const settingsModal = document.getElementById("settings-modal");
    const modalOverlay = document.getElementById("modal-overlay");
    const closeSettingsButton = document.getElementById("close-settings");

    if (settingsButton && settingsModal && modalOverlay) {
        settingsButton.addEventListener("click", function () {
            settingsModal.style.display = "block";
            modalOverlay.style.display = "block";
        });
    }

    if (closeSettingsButton) {
        closeSettingsButton.addEventListener("click", function () {
            settingsModal.style.display = "none";
            modalOverlay.style.display = "none";
        });
    }
    modalOverlay.addEventListener("click", function () {
        settingsModal.style.display = "none";
        modalOverlay.style.display = "none";
    });
});

function adjustSettingButton() {
    const settingBtn = document.getElementById("settings-btn");
    const h1 = document.querySelector("h1");

    if (settingBtn && h1) {
        const h1Rect = h1.getBoundingClientRect();
        settingBtn.style.top = `${h1Rect.top*1.5 + window.scrollY}px`;
        settingBtn.style.right = `5vw`; // C·ªë ƒë·ªãnh b√™n ph·∫£i
    }
}

// G·ªçi l·∫°i khi load trang v√† khi thay ƒë·ªïi k√≠ch th∆∞·ªõc c·ª≠a s·ªï
window.onload = adjustSettingButton;
window.onresize = adjustSettingButton;



//Ch·ªçn nh√¢n v·∫≠t
async function fetchCharacterImages() {
    const character = getSelectedCharacter();
    try {
        console.log(`üì° ƒêang l·∫•y ·∫£nh cho nh√¢n v·∫≠t: ${character}`);

        const imageRef = db.collection("characterImages").doc(character);
        const imageDoc = await imageRef.get();

        let images = ["https://i.imgur.com/cnzaFeS.png"]; // ·∫¢nh m·∫∑c ƒë·ªãnh

        if (imageDoc.exists) {
            images = imageDoc.data().images || images;
        }

        localStorage.setItem(`images_${character}`, JSON.stringify(images));
        console.log("‚úÖ ·∫¢nh nh√¢n v·∫≠t ƒë√£ ƒë∆∞·ª£c t·∫£i:", images);
        return images;
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y ·∫£nh nh√¢n v·∫≠t:", error);
        return null;
    }
}

async function fetchCharacterQuotes() {
    const character = getSelectedCharacter();
    try {
        console.log(`üì° ƒêang l·∫•y tho·∫°i cho nh√¢n v·∫≠t: ${character}`);

        const quoteRef = db.collection("characterQuotes").doc(character);
        const quoteDoc = await quoteRef.get();

        let dialogues = ["Xin ch√†o! T√¥i l√† tr·ª£ th·ªß c·ªßa b·∫°n!"]; // Tho·∫°i m·∫∑c ƒë·ªãnh

        if (quoteDoc.exists) {
            dialogues = quoteDoc.data().quotes || dialogues;
            const userQuotes = quoteDoc.data().userQuotes || {};
            const username = localStorage.getItem("username");

            if (username && userQuotes[username]) {
                dialogues = dialogues.concat(userQuotes[username]);
            }
        }

        localStorage.setItem(`dialogues_${character}`, JSON.stringify(dialogues));
        console.log("‚úÖ Tho·∫°i nh√¢n v·∫≠t ƒë√£ ƒë∆∞·ª£c t·∫£i:", dialogues);
        return dialogues;
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y tho·∫°i nh√¢n v·∫≠t:", error);
        return null;
    }
}

async function showRandomCharacterImage() {
    const character = getSelectedCharacter();

    // ‚ö° Th·ª≠ l·∫•y t·ª´ localStorage tr∆∞·ªõc
    let images = JSON.parse(localStorage.getItem(`images_${character}`)) || [];

    if (images.length === 0) {
        console.log(`üì° Kh√¥ng c√≥ ·∫£nh trong localStorage, t·∫£i m·ªõi t·ª´ Firestore cho ${character}`);
        images = await fetchCharacterImages(); // T·∫£i m·ªõi t·ª´ Firestore
    }

    // N·∫øu v·∫´n kh√¥ng c√≥ ·∫£nh n√†o, d√πng ·∫£nh m·∫∑c ƒë·ªãnh
    if (images.length === 0) {
        images = ["https://i.imgur.com/cnzaFeS.png"]; // ·∫¢nh m·∫∑c ƒë·ªãnh
    }

    const randomImage = images[Math.floor(Math.random() * images.length)];
    document.getElementById("callout-avatar").src = randomImage;

    console.log(`üñºÔ∏è C·∫≠p nh·∫≠t ·∫£nh nh√¢n v·∫≠t: ${character} - ${randomImage}`);
}


async function showRandomCharacterQuote() {
    const character = getSelectedCharacter();
    let dialogues = JSON.parse(localStorage.getItem(`dialogues_${character}`)) || [];

    if (dialogues.length === 0) {
        dialogues = await fetchCharacterQuotes();
    }

    const randomDialogue = dialogues[Math.floor(Math.random() * dialogues.length)];
    document.getElementById("callout-bubble").innerText = randomDialogue;

    console.log(`üí¨ C·∫≠p nh·∫≠t tho·∫°i nh√¢n v·∫≠t: ${randomDialogue}`);
}



// G·ªçi h√†m khi trang t·∫£i xong
document.addEventListener("DOMContentLoaded", showRandomCharacterImage);

// G·ªçi h√†m khi trang t·∫£i xong
document.addEventListener("DOMContentLoaded", showRandomCharacterQuote);


async function downloadCharacterData() {
    const character = getSelectedCharacter();

    console.log(`üì• ƒêang t·∫£i d·ªØ li·ªáu cho nh√¢n v·∫≠t: ${character}`);

    // X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc khi t·∫£i d·ªØ li·ªáu m·ªõi
    localStorage.removeItem(`images_${character}`);
    localStorage.removeItem(`dialogues_${character}`);

    const images = await fetchCharacterImages();
    const dialogues = await fetchCharacterQuotes();
	checkUserPoints();

    if (images && dialogues) {
        alert(`‚úÖ D·ªØ li·ªáu c·ªßa ${character} ƒë√£ ƒë∆∞·ª£c l∆∞u ƒë·ªÉ d√πng offline!`);

        // üî• G·ªçi l·∫°i h√†m hi·ªÉn th·ªã ·∫£nh & tho·∫°i m·ªõi ngay l·∫≠p t·ª©c
        setTimeout(() => {
            showRandomCharacterImage();
            showRandomCharacterQuote();
        }, 300);
    } else {
        alert("‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu, ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.");
    }
}

function getSelectedCharacter() {
    return document.getElementById("character-select")?.value || localStorage.getItem("selectedCharacter") || "V∆∞∆°ng";
}

document.getElementById("character-select").addEventListener("change", async function () {
    const selectedCharacter = this.value;
    localStorage.setItem("selectedCharacter", selectedCharacter);

    console.log(`üîÑ Nh√¢n v·∫≠t ƒë√£ ƒë·ªïi th√†nh: ${selectedCharacter}`);

    // X√≥a d·ªØ li·ªáu nh√¢n v·∫≠t c≈© trong localStorage ƒë·ªÉ bu·ªôc t·∫£i d·ªØ li·ªáu m·ªõi
    localStorage.removeItem(`images_${selectedCharacter}`);
    localStorage.removeItem(`dialogues_${selectedCharacter}`);

    // üî• G·ªçi l·∫°i hi·ªÉn th·ªã ·∫£nh, tho·∫°i v√† check ƒëi·ªÉm s·ªë ngay khi ƒë·ªïi nh√¢n v·∫≠t
    showRandomCharacterImage();
    showRandomCharacterQuote();
});



async function checkUserPoints() {
    const username = localStorage.getItem("username");
    if (!username) {
        console.warn("‚ùå Kh√¥ng t√¨m th·∫•y username trong localStorage.");
        return;
    }

    const userRef = firebase.firestore().collection("users").doc(username);
    const userDoc = await userRef.get();

    let totalPoints = 0;
    if (userDoc.exists) {
        totalPoints = userDoc.data().totalScore || 0;
    }

    console.log(`üìù Ki·ªÉm tra t·ªïng ƒëi·ªÉm c·ªßa ${username}: ${totalPoints}`);

    const allowedQuotes = Math.floor(totalPoints / 1000);
    console.log(`üí¨ S·ªë c√¢u tho·∫°i ƒë∆∞·ª£c ph√©p nh·∫≠p: ${allowedQuotes}`);

    const messageElement = document.getElementById("quote-message");
    const customQuoteSection = document.getElementById("custom-quote-section");
    customQuoteSection.innerHTML = ""; // X√≥a n·ªôi dung c≈©

    if (allowedQuotes > 0) {
        messageElement.innerHTML = `B·∫°n c√≥ th·ªÉ th√™m ${allowedQuotes} c√¢u tho·∫°i v√†o kho.`;
        customQuoteSection.style.display = "block"; // üî• Hi·ªÉn th·ªã ph·∫ßn nh·∫≠p tho·∫°i

        for (let i = 0; i < allowedQuotes; i++) {
            const input = document.createElement("input");
            input.type = "text";
            input.classList.add("custom-quote-input");
            input.placeholder = `Nh·∫≠p c√¢u tho·∫°i #${i + 1}`;
            input.dataset.index = i;

            // Load tho·∫°i c≈© t·ª´ database
            loadUserQuote(username, i, input);

            customQuoteSection.appendChild(input);
        }

        const submitButton = document.createElement("button");
        submitButton.classList.add("green");
        submitButton.innerText = "L∆∞u tho·∫°i";
        submitButton.onclick = submitCustomQuotes;
        customQuoteSection.appendChild(submitButton);
    } else {
        messageElement.innerHTML = "B·∫°n ch∆∞a c√≥ ƒë·ªß ƒëi·ªÉm ƒë·ªÉ th√™m tho·∫°i, s·∫Ω d√πng kho tho·∫°i m·∫∑c ƒë·ªãnh.";
        customQuoteSection.style.display = "none"; // ·∫®n ph·∫ßn nh·∫≠p tho·∫°i n·∫øu kh√¥ng ƒë·ªß ƒëi·ªÉm
    }
}


async function loadUserQuote(character, username, index, inputElement) {
    const quoteRef = firebase.firestore().collection("characterQuotes").doc(character);
    const quoteDoc = await quoteRef.get();

    if (quoteDoc.exists) {
        const userQuotes = quoteDoc.data().userQuotes || {};
        if (userQuotes[username] && userQuotes[username][index]) {
            inputElement.value = userQuotes[username][index]; // Hi·ªÉn th·ªã tho·∫°i c≈©
        }
    }
}

async function submitCustomQuotes() {
    const username = localStorage.getItem("username");
    if (!username) return;

    const selectedCharacter = localStorage.getItem("selectedCharacter") || "V∆∞∆°ng";
    const inputs = document.querySelectorAll(".custom-quote-input");

    let newQuotes = [];
    inputs.forEach(input => {
        if (input.value.trim() !== "") {
            newQuotes.push(input.value.trim());
        }
    });

    if (newQuotes.length === 0) {
        alert("‚ùå Kh√¥ng c√≥ tho·∫°i n√†o ƒë·ªÉ l∆∞u.");
        return;
    }

    const quoteRef = firebase.firestore().collection("characterQuotes").doc(selectedCharacter);

    try {
        const docSnapshot = await quoteRef.get();
        let existingQuotes = docSnapshot.exists ? docSnapshot.data().userQuotes || {} : {};

        existingQuotes[username] = newQuotes;

        await quoteRef.set({ userQuotes: existingQuotes }, { merge: true });

        alert("‚úÖ C√¢u tho·∫°i ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
    } catch (error) {
        console.error("‚ùå L·ªói khi l∆∞u tho·∫°i:", error);
    }
}







const dialogueDatabase = {
    "Vuong (6).png": [
        "ROLL ƒëi·ªÉm.",
        "ƒê·ª´ng l√†m ch·ªó d·ª±a, h√£y l√†m t·∫•m g∆∞∆°ng sao?",
        "C·∫≠u kh√¥ng ƒë∆∞·ª£c th·∫ø n√†y, tuy·ªát ƒë·ªëi kh√¥ng ƒë∆∞·ª£c.",
        "Kh√¥ng th·∫£ l√† b·∫•t h·∫°nh c·ªßa Trung Th·∫£o ƒê∆∞·ªùng, th·∫£ th√¨ l√† b·∫•t h·∫°nh c·ªßa t·∫•t c·∫£ c√°c ƒë·ªôi.",
        "ƒêo√°n kh√¥ng ra, h·∫ßy, ƒëo√°n kh√¥ng ra.",
        "Kho·∫£ng c√°ch n√†y ch·ªâ l√† t·∫°m th·ªùi th√¥i, c·∫≠u c√≥ ti·ªÅm nƒÉng r·∫•t l·ªõn!",
        "C·∫≠u v·∫´n c√≤n r·∫•t tr·∫ª, h√£y ti·∫øp t·ª•c c·ªë g·∫Øng, r·ªìi s·∫Ω c√≥ m·ªôt ng√†y n√†o ƒë√≥ c·∫≠u v∆∞·ª£t qua t·∫•t c·∫£ m·ªçi ng∆∞·ªùi.",
        "N·∫øu nh∆∞ may m·∫Øn c≈©ng l√† sai l·∫ßm, v·∫≠y th√¨ t√¥i nguy·ªán √Ω sai c√†ng th√™m sai.",
        "G√°nh n·∫∑ng n√†y... Qu√° n·∫∑ng r·ªìi.",
        "T·ª± tin l√™n, ƒë·ª´ng ho√†i nghi b·∫£n th√¢n.",
        "R·∫•t mong ch·ªù tr·∫≠n ƒë·∫•u ti·∫øp theo v·ªõi h·∫Øn.",
        "T·∫°i th·ªùi kh·∫Øc m·∫•u ch·ªët, anh ·∫•y ch∆∞a t·ª´ng th·∫•t b·∫°i. Anh ·∫•y c√≥ th·ªÉ thua, nh∆∞ng t·ª´ tr∆∞·ªõc ƒë·∫øn nay ch∆∞a t·ª´ng khi·∫øn ng∆∞·ªùi kh√°c m·∫•t ƒëi ni·ªÅm tin v√†o m√¨nh.",
        "Gi·ªëng ·ªü ƒë√¢u nh·ªâ...",
        "R√µ r√†ng l√† h·ªç ƒëang b·ªã d·∫´n tr∆∞·ªõc, nh∆∞ng khi V∆∞∆°ng Ki·ªát Hi v·ª´a v√†o s√¢n th√¨ h·ªç tr√¥ng nh∆∞ ch·∫Øc ch·∫Øn s·∫Ω th·∫Øng v·∫≠y.",
        "C√≥ l·∫Ω l√† v·∫≠y!",
        "C∆° h·ªôi th·∫ø n√†y e r·∫±ng kh√≥ m√† c√≥ ƒë∆∞·ª£c.",
        "T√≠ch c·ª±c, ch·ªß ƒë·ªông.",
        "B√¢y gi·ªù, ti·∫øp t·ª•c hu·∫•n luy·ªán.",
        "Tr·∫≠n ƒë·∫•u tuy·ªát v·ªùi.",
        "Cu·ªëi c√πng c≈©ng hi·ªÉu r·ªìi.",
        "M·ªôt trong nh·ªØng tuy·ªÉn th·ªß ƒë√°ng tin c·∫≠y nh·∫•t trong Li√™n minh.",
        "Cocacola nh√©, c·∫£m ∆°n.",
        "T√¥i nghƒ© l√† t√¥i c√≥ th·ªÉ.",
        "ƒê·∫øn r·ªìi.",
        "L∆∞·ªùi r·ªìi.",
        "T∆∞·ªõng lang c·ªë.",
        "C·∫≠u ƒë√πa c√°i g√¨? Th·ªùi gian c·ªßa c·∫≠u d√πng ƒë·ªÉ l√£ng ph√≠ v√†o vi·ªác n√†y sao?",
        "M·ªói ng∆∞·ªùi ch√∫ng ta ƒë·ªÅu mi·ªÖn c∆∞·ª°ng b·∫£n th√¢n m·ªôt ch√∫t, nghe theo mong mu·ªën c·ªßa anh ·∫•y ƒëi?",
        "Ng√†y mai, ai c≈©ng c√≥ ng√†y mai.",
        "C·∫≠u nghƒ© ch·ªâ c√≥ h·∫Øn m·ªõi c√¢n ƒë∆∞·ª£c tr√¨nh n√†y sao?",
        "Kh√¥ng th·ªÉ m·ªát m·ªèi! Mu·ªën t·ªìn t·∫°i trong Li√™n minh th√¨ ph·∫£i ng∆∞·ª£c d√≤ng m√† ƒëi.",
        "K√Ω t√™n ·ªü ƒë√¢u?",
        "Tr∆∞·ªõc nay ch∆∞a t·ª´ng xem th∆∞·ªùng ƒë·ªëi th·ªß n√†o.",
        "Ch√™nh l·ªách th·ª±c l·ª±c kh√¥ng quy·∫øt ƒë·ªãnh th·∫Øng b·∫°i, tranh t√†i l√† ƒë·ªÉ chi·∫øn th·∫Øng, kh√¥ng ph·∫£i ƒë·ªÉ so s√°nh.",
        "C·∫≠u mu·ªën th·ª≠ √†?",
        "T·∫Øt ƒëi·ªán tho·∫°i di ƒë·ªông.",
        "Kh√¥ng c√≥ g√¨ ƒë·∫∑c bi·ªát, ch·ªâ l√† l·ªëi ƒë√°nh qu√™ m√πa nh·∫•t.",
        "Ph·∫£i g√°nh l·∫•y t∆∞∆°ng lai c·ªßa Vi Th·∫£o nh√©!",
        "V∆∞∆°ng Ki·ªát Hi v√† V∆∞∆°ng B·∫•t L∆∞u H√†nh c·ªßa anh ·∫•y c·ª© th·∫ø kh√¥ng g√¨ c·∫£n n·ªïi, g√°nh l·∫•y Vi Th·∫£o bay v·ªÅ ph√≠a tr∆∞·ªõc.",
        "C√≥ kh√≥ d√πng kh√¥ng?",
        "ƒê√°nh thua c≈©ng kh√¥ng sao, nh∆∞ng ƒë·ª´ng ƒë·ªÉ m·∫•t ni·ªÅm tin nh√©!",
        "C√≥ ƒë√¥i khi l·ª±a ch·ªçn kh√¥ng ph·∫£i l√† ƒë√∫ng hay sai, ch·ªâ l√† c·∫≠u c√≥ ki√™n ƒë·ªãnh b∆∞·ªõc ti·∫øp hay kh√¥ng.",
        "T√¥i mong m·ªçi ng∆∞·ªùi c√≥ th·ªÉ ti·∫øp t·ª•c v√† h·ªçc ƒë∆∞·ª£c g√¨ ƒë√≥.",
        "Nh·∫•t ƒë·ªãnh.",
        "N√≥i nh·∫£m th√¨ c√≥ nghƒ©a l√Ω g√¨...",
        "C√°c c·∫≠u ki·ªÉu g√¨ c≈©ng s·∫Ω g·∫∑p l·∫°i.",
        "C·∫≠u t·ª± tin qu√° nh·ªâ?",
        "Vi Th·∫£o m·ªõi l√† l·ª±a ch·ªçn t·ªët nh·∫•t.",
        "D√πng l·ªëi ƒë√°nh em tho·∫£i m√°i nh·∫•t, am hi·ªÉu nh·∫•t, quen thu·ªôc nh·∫•t l√† ƒë∆∞·ª£c r·ªìi."
    ]
};




