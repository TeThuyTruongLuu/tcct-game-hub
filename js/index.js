document.addEventListener('deviceready', onDeviceReady, false);

function onDeviceReady() {
    // Cordova is now initialized. Have fun!

    console.log('Running cordova-' + cordova.platformId + '@' + cordova.version);
    document.getElementById('deviceready').classList.add('ready');
}

//Load login
document.addEventListener("deviceready", function() {
    document.addEventListener("backbutton", function(e) {
        const loginModal = document.getElementById("login-modal");
        if (loginModal.style.display === "none") {
            e.preventDefault();
            navigator.app.exitApp();
        }
    }, false);
}, false);


// Ki·ªÉm tra Firebase
if (!firebase.apps.length) {
    const firebaseConfig = {
        apiKey: "AIzaSyBtpLSSNBj9lHtzibLh5QSRAPg3iQ46Q3g",
        authDomain: "tcct-minigames.firebaseapp.com",
        projectId: "tcct-minigames",
        storageBucket: "tcct-minigames.firebasestorage.app",
        messagingSenderId: "604780847536",
        appId: "1:604780847536:web:f8015bde5ef469b04c7675",
        measurementId: "G-1GGDZR6VY5"
    };

    firebase.initializeApp(firebaseConfig);
    console.log("üî• Firebase ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o!");
}

// L·∫•y Firestore
const db = firebase.firestore();

//Ki·ªÉm tra ƒëi·ªÅu ki·ªán log-in, log-out
document.addEventListener("DOMContentLoaded", function () {
    console.log("üî• DOM ƒë√£ load xong!");

    const savedUsername = localStorage.getItem("username");
    const startButton = document.getElementById("start-button");
    const playWithoutLoginButton = document.getElementById("play-without-login");
    const codeInput = document.getElementById("code-input");
    const nicknameInput = document.getElementById("nickname-input");
    const tabButtons = document.querySelectorAll(".tab-btn");
    const leaderboardContent = document.getElementById("leaderboard-content");

    if (savedUsername) {
        console.log(`üîÑ T·ª± ƒë·ªông ƒëƒÉng nh·∫≠p: ${savedUsername}`);
        document.getElementById("login-modal").style.display = "none";
        document.getElementById("welcome-message").style.display = "block";
        document.getElementById("display-name").innerText = savedUsername;
        document.getElementById("logout-button").style.display = "block";

        document.querySelector(".points").style.display = "block";
        document.querySelector(".scoreboard-container").style.display = "flex";
        document.querySelector(".game-list").style.display = "grid";
        document.getElementById("scoreboard").style.display = "block";
		document.getElementById("character-callout").style.display = "flex";
		document.getElementById("settings-btn").style.display = "block";
        updateTotalScore();
    }

    if (startButton) {
        startButton.addEventListener("click", async () => {
            const codeInputValue = document.getElementById("code-input").value.trim();
            const nicknameInputValue = document.getElementById("nickname-input").value.trim();

            if (codeInputValue !== "TCCT" || !nicknameInputValue) {
                alert("Nh·∫≠p ƒë√∫ng m√£ 'TCCT' v√† ƒëi·ªÅn t√™n h·ª£p l·ªá nha b·ªì ∆°i.");
                return;
            }

            console.log(`üìå ƒêƒÉng nh·∫≠p v·ªõi t√™n: ${nicknameInputValue}`);

            const userRef = db.collection("users").doc(nicknameInputValue);
            const userDoc = await userRef.get();

            if (userDoc.exists) {
                alert(`Ch√†o m·ª´ng tr·ªü l·∫°i, ${nicknameInputValue}!`);
            } else {
                await userRef.set({ username: nicknameInputValue });
                alert(`T·∫°o t√†i kho·∫£n th√†nh c√¥ng! Xin ch√†o, ${nicknameInputValue}.`);
            }

            localStorage.setItem("username", nicknameInputValue);

            document.getElementById("login-modal").style.display = "none";
            document.getElementById("welcome-message").style.display = "block";
            document.getElementById("display-name").innerText = nicknameInputValue;
            document.getElementById("logout-button").style.display = "block";

            document.querySelector(".points").style.display = "block";
            document.querySelector(".scoreboard-container").style.display = "flex";
            document.querySelector(".game-list").style.display = "grid";
            document.getElementById("scoreboard").style.display = "block";
			document.getElementById("character-callout").style.display = "flex";
			document.getElementById("settings-btn").style.display = "block";

            updateTotalScore();
        });
    }

    // üéØ Khi nh·∫•n Enter trong input => Click v√†o n√∫t "V√†o game"
    function handleEnterKey(event) {
        if (event.key === "Enter" && startButton) {
            startButton.click();
        }
    }

    if (codeInput) codeInput.addEventListener("keydown", handleEnterKey);
    if (nicknameInput) nicknameInput.addEventListener("keydown", handleEnterKey);

    if (playWithoutLoginButton) {
        playWithoutLoginButton.addEventListener("click", () => {
            console.log("üéÆ Ch·∫ø ƒë·ªô ch∆°i ·∫©n danh");

            document.getElementById("login-modal").style.display = "none";
            document.querySelector(".game-list").style.display = "grid";
            document.querySelector(".points").style.display = "none";
            document.querySelector(".scoreboard-container").style.display = "none";
            document.getElementById("scoreboard").style.display = "none";
            document.getElementById("logout-button").style.display = "none";
			document.getElementById("character-callout").style.display = "flex";
			document.getElementById("settings-btn").style.display = "block";

            alert("B·ªì ƒëang ch∆°i m√† kh√¥ng ƒëƒÉng nh·∫≠p, ƒëi·ªÉm s·ªë s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u!");
        });
    }

    // üéØ X·ª≠ l√Ω chuy·ªÉn ƒë·ªïi gi·ªØa c√°c game trong b·∫£ng k·ª∑ l·ª•c
    tabButtons.forEach((btn) => {
        btn.addEventListener("click", function () {
            tabButtons.forEach((btn) => btn.classList.remove("active"));
            this.classList.add("active");

            const game = this.getAttribute("data-game");
            loadLeaderboard(game);
        });
    });

	loadLeaderboard();
});

function logout() {
    localStorage.removeItem("username");
    location.reload();
}


//L∆∞u ƒëi·ªÉm
async function saveScoreToDB(game, newScore) {
    const username = localStorage.getItem("username");
    if (!username) {
        alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p, ƒëi·ªÉm s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u!");
        return;
    }

    const scoreDocId = `${username}-${game}`; // üî• T·∫°o ID duy nh·∫•t cho m·ªói user-game
    const scoreRef = firebase.firestore().collection("userScores").doc(scoreDocId);

    try {
        const docSnapshot = await scoreRef.get();
        if (!docSnapshot.exists) {
            // üî• N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu, t·∫°o m·ªõi
            await scoreRef.set({
                username: username,
                game: game,
                score: newScore,
                updatedAt: new Date().toISOString()
            });
            console.log(`üÜï T·∫°o ƒëi·ªÉm m·ªõi: ${username} - ${game}: ${newScore}`);
        } else {
            const oldScore = docSnapshot.data().score;
            if (newScore > oldScore) {
                // üî• N·∫øu ƒëi·ªÉm m·ªõi cao h∆°n ƒëi·ªÉm c≈©, ghi ƒë√® l√™n
                await scoreRef.update({
                    score: newScore,
                    updatedAt: new Date().toISOString()
                });
                console.log(`‚úÖ C·∫≠p nh·∫≠t ƒëi·ªÉm: ${username} - ${game}: ${newScore}`);
            } else {
                console.log("‚ö†Ô∏è ƒêi·ªÉm m·ªõi kh√¥ng cao h∆°n ƒëi·ªÉm c≈©, kh√¥ng c·∫≠p nh·∫≠t.");
            }
        }

        // üî• C·∫≠p nh·∫≠t t·ªïng ƒëi·ªÉm sau khi thay ƒë·ªïi ƒëi·ªÉm c·ªßa game
        updateTotalScore();
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªÉm:", error);
    }
}

window.saveScoreToDB = saveScoreToDB;

//Leaderboard + Personal score
let personalScoresVisible = false;
let leaderboardVisible = false;

async function loadLeaderboard(game) {
    const leaderboardContent = document.getElementById("leaderboard-content");

    if (!game) {
        console.error("‚ùå L·ªói: Game kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã undefined.");
        return;
    }

    leaderboardContent.innerHTML = `<h3>B·∫£ng x·∫øp h·∫°ng</h3>`;

    const scoresRef = firebase.firestore().collection("userScores");

    let q;
    if (game === "L·∫≠t h√¨nh") {
        q = scoresRef.where("game", "==", game).orderBy("totalTimeInSeconds", "asc").limit(10); 
    } else {
        q = scoresRef.where("game", "==", game).orderBy("score", "desc").limit(10);
    }

    try {
        const querySnapshot = await q.get();
        
        let html = "";
        if (game === "L·∫≠t h√¨nh") {
            html += `<table><tr><th>Ng∆∞·ªùi ch∆°i</th><th>Th·ªùi gian (s)</th><th>ƒêi·ªÉm</th></tr>`;
        } else {
            html += `<table><tr><th>Ng∆∞·ªùi ch∆°i</th><th>ƒêi·ªÉm</th></tr>`;
        }

        if (querySnapshot.empty) {
            html += `<tr><td colspan="${game === "L·∫≠t h√¨nh" ? 3 : 2}">Ch∆∞a c√≥ d·ªØ li·ªáu</td></tr>`;
        } else {
            querySnapshot.forEach((doc) => {
                const data = doc.data();
                if (game === "L·∫≠t h√¨nh") {
                    html += `<tr><td>${data.username}</td><td>${data.totalTime || "N/A"}</td><td>${data.score}</td></tr>`;
                } else {
                    html += `<tr><td>${data.username}</td><td>${data.score}</td></tr>`;
                }
            });
        }

        html += `</table>`;
        leaderboardContent.innerHTML += html;
    } catch (error) {
        console.error(`‚ùå L·ªói khi t·∫£i b·∫£ng x·∫øp h·∫°ng ${game}:`, error);
    }
}


function formatDate(isoString) {
    const date = new Date(isoString);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0'); // Th√°ng b·∫Øt ƒë·∫ßu t·ª´ 0 n√™n +1
    const year = date.getFullYear();

    return `${day}/${month}/${year}`;
}


async function showPersonalScores() {
    const scoreboard = document.getElementById("scoreboard");

    if (personalScoresVisible) {
        scoreboard.innerHTML = ""; // ·∫®n b·∫£ng ƒëi·ªÉm khi b·∫•m l·∫°i
        personalScoresVisible = false;
        return;
    }

    const username = localStorage.getItem("username");
    if (!username) {
        alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p!");
        return;
    }

    const scoresRef = firebase.firestore().collection("userScores");
    const q = scoresRef.where("username", "==", username).orderBy("score", "desc").limit(10);

    try {
        const querySnapshot = await q.get();
        let html = "<h2>B·∫£ng ƒëi·ªÉm c√° nh√¢n</h2><table><tr><th>Game</th><th>ƒêi·ªÉm cao nh·∫•t</th><th>Th·ªùi gian</th></tr>";

        if (querySnapshot.empty) {
            html += `<tr><td colspan="3">N/A</td></tr>`; // Kh√¥ng c√≥ d·ªØ li·ªáu th√¨ hi·ªÉn th·ªã "N/A"
        } else {
            querySnapshot.forEach((doc) => {
                const data = doc.data();
                const formattedDate = formatDate(data.updatedAt); // Chuy·ªÉn ƒë·ªïi th·ªùi gian

                html += `<tr><td>${data.game}</td><td>${data.score}</td><td>${formattedDate}</td></tr>`;
            });
        }

        html += "</table>";
        scoreboard.innerHTML = html;
        personalScoresVisible = true; // ƒê√°nh d·∫•u b·∫£ng ƒëi·ªÉm ƒëang hi·ªÉn th·ªã
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y b·∫£ng ƒëi·ªÉm c√° nh√¢n:", error);
    }
}


async function showLeaderboard() {
    const leaderboardSection = document.getElementById("leaderboard-section");

    // N·∫øu ƒëang ·∫©n th√¨ hi·ªÉn th·ªã, n·∫øu ƒëang hi·ªÉn th·ªã th√¨ ·∫©n ƒëi
    if (leaderboardSection.style.display === "none") {
        leaderboardSection.style.display = "block";
        loadLeaderboard("2048"); // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã game ƒë·∫ßu ti√™n
    } else {
        leaderboardSection.style.display = "none";
    }
}


async function updateTotalScore() {
    const username = localStorage.getItem("username");
    if (!username) {
        console.warn("‚ö†Ô∏è Ng∆∞·ªùi ch∆°i ch∆∞a ƒëƒÉng nh·∫≠p, kh√¥ng c·∫≠p nh·∫≠t t·ªïng ƒëi·ªÉm.");
        return;
    }

    const scoresRef = firebase.firestore().collection("userScores");
    const q = scoresRef.where("username", "==", username);

    try {
        const querySnapshot = await q.get();
        let totalScore = 0;

        if (querySnapshot.empty) {
            console.log(`‚ö†Ô∏è Ng∆∞·ªùi ch∆°i ${username} ch∆∞a c√≥ ƒëi·ªÉm trong game n√†o.`);
            document.getElementById("user-points").innerText = "N/A";
            return;
        }

        querySnapshot.forEach((doc) => {
            totalScore += doc.data().score; // C·ªông t·ªïng ƒëi·ªÉm c·ªßa t·∫•t c·∫£ game
        });

        console.log(`üî• T·ªïng ƒëi·ªÉm m·ªõi c·ªßa ${username}: ${totalScore}`);
        document.getElementById("user-points").innerText = totalScore;

        // üî• C·∫≠p nh·∫≠t t·ªïng ƒëi·ªÉm v√†o Firestore
        const userRef = firebase.firestore().collection("users").doc(username);
        await userRef.set({ totalScore: totalScore }, { merge: true });

        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t t·ªïng ƒëi·ªÉm v√†o Firestore.`);
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t t·ªïng ƒëi·ªÉm:", error);
    }
}



async function updateOldLeaderboardData() {
    const scoresRef = firebase.firestore().collection("userScores");
    
    try {
        const querySnapshot = await scoresRef.where("game", "==", "L·∫≠t h√¨nh").get();
        let count = 0;

        querySnapshot.forEach(async (doc) => {
            const data = doc.data();

            if (!data.totalTimeInSeconds && data.totalTime) {
                const totalTimeParts = data.totalTime.split(":").map(Number);
                const totalTimeInSeconds = totalTimeParts[0] * 60 + totalTimeParts[1]; // Chuy·ªÉn th√†nh gi√¢y

                await scoresRef.doc(doc.id).update({
                    totalTimeInSeconds: totalTimeInSeconds
                });

                console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${data.username}: ${data.totalTime} ‚Üí ${totalTimeInSeconds}s`);
                count++;
            }
        });

        console.log(`üéâ ƒê√£ c·∫≠p nh·∫≠t xong ${count} b·∫£n ghi.`);
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu:", error);
    }
}

updateOldLeaderboardData();

//N√∫t setting
document.addEventListener("DOMContentLoaded", function () {
    const settingsButton = document.getElementById("settings-btn");
    const settingsModal = document.getElementById("settings-modal");
    
    const closeSettingsButton = document.getElementById("close-settings");

    if (settingsButton && settingsModal) {
        settingsButton.addEventListener("click", function () {
            settingsModal.style.display = "block";
            
        });
    }

    if (closeSettingsButton) {
        closeSettingsButton.addEventListener("click", function () {
            settingsModal.style.display = "none";
            
        });
    }
});



function adjustSettingButton() {
    const settingBtn = document.getElementById("settings-btn");
    const h1 = document.querySelector("h1");

    if (settingBtn && h1) {
        const h1Rect = h1.getBoundingClientRect();
        settingBtn.style.top = `${h1Rect.top*1.5 + window.scrollY}px`;
        settingBtn.style.right = `5vw`;
    }
}

// G·ªçi l·∫°i khi load trang v√† khi thay ƒë·ªïi k√≠ch th∆∞·ªõc c·ª≠a s·ªï
window.onload = adjustSettingButton;
window.onresize = adjustSettingButton;


//Ch·ªçn bias
document.addEventListener("DOMContentLoaded", async function () {
    console.log("üî• DOM ƒë√£ load xong!");

    const selectedCharacter = await loadUserBias(); // T·∫£i bias ƒë√∫ng
    await showRandomCharacterImage(); // Hi·ªÉn th·ªã h√¨nh ·∫£nh nh√¢n v·∫≠t
    await showRandomCharacterQuote(); // Hi·ªÉn th·ªã tho·∫°i nh√¢n v·∫≠t
    await checkUserPoints(); // Ki·ªÉm tra ƒëi·ªÉm ƒë·ªÉ hi·ªÉn th·ªã √¥ nh·∫≠p tho·∫°i
});

async function loadUserBias() {
    console.log("üîÑ ƒêang t·∫£i bias c·ªßa user...");

    const username = localStorage.getItem("username");
    let selectedCharacter = "V∆∞∆°ng"; // M·∫∑c ƒë·ªãnh l√† V∆∞∆°ng

    if (username) {
        const userRef = db.collection("users").doc(username);
        const userDoc = await userRef.get();

        if (userDoc.exists && userDoc.data().bias) {
            selectedCharacter = userDoc.data().bias; // N·∫øu user c√≥ bias, l·∫•y t·ª´ Firestore
        } else {
            // N·∫øu user ch∆∞a c√≥ bias, l∆∞u m·∫∑c ƒë·ªãnh l√† "V∆∞∆°ng"
            await userRef.set({ bias: "V∆∞∆°ng" }, { merge: true });
        }
    }

    // üî• L∆∞u bias v√†o LocalStorage ƒë·ªÉ reload kh√¥ng m·∫•t
    localStorage.setItem("selectedCharacter", selectedCharacter);
    document.getElementById("character-select").value = selectedCharacter;

    console.log(`‚úÖ Bias ƒë√£ t·∫£i: ${selectedCharacter}`);

    return selectedCharacter;
}

async function setSelectedCharacter() {
    const characterSelect = document.getElementById("character-select");
    const selectedCharacter = characterSelect?.value || "V∆∞∆°ng";

    console.log(`üîÑ Ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn nh√¢n v·∫≠t: ${selectedCharacter}`);

    // üî• Lu√¥n l∆∞u v√†o LocalStorage
    localStorage.setItem("selectedCharacter", selectedCharacter);

    const username = localStorage.getItem("username");

    if (username) {
        // üî• N·∫øu user ƒë√£ ƒëƒÉng nh·∫≠p, c·∫≠p nh·∫≠t Firestore
        const userRef = db.collection("users").doc(username);
        await userRef.set({ bias: selectedCharacter }, { merge: true });
    }

    // üî• C·∫≠p nh·∫≠t ngay h√¨nh ·∫£nh & tho·∫°i nh√¢n v·∫≠t m·ªõi
    await showRandomCharacterImage();
    await showRandomCharacterQuote();
    await checkUserPoints();
}

async function downloadCharacterData() {
    const character = localStorage.getItem("selectedCharacter") || "V∆∞∆°ng";

    console.log(`üì• ƒêang t·∫£i d·ªØ li·ªáu cho nh√¢n v·∫≠t: ${character}`);

    if (character === "Kh√°c") {
        alert("B·∫°n kh√¥ng th·ªÉ t·∫£i nh√¢n v·∫≠t 'Kh√°c', h√£y li√™n h·ªá Phong.");
        return;
    }

    // üî• X√≥a d·ªØ li·ªáu nh√¢n v·∫≠t c≈© tr∆∞·ªõc khi t·∫£i d·ªØ li·ªáu m·ªõi
    localStorage.removeItem(`images_${character}`);
    localStorage.removeItem(`dialogues_${character}`);

    // üîÑ T·∫£i ·∫£nh v√† tho·∫°i t·ª´ Firestore
    const images = await fetchCharacterImages(character);
    const dialogues = await fetchCharacterQuotes(character);

    // ‚úÖ L∆∞u v√†o localStorage ƒë·ªÉ d√πng offline
    localStorage.setItem(`images_${character}`, JSON.stringify(images));
    localStorage.setItem(`dialogues_${character}`, JSON.stringify(dialogues));

    if (images.length > 0 && dialogues.length > 0) {
        alert(`‚úÖ D·ªØ li·ªáu c·ªßa ${character} ƒë√£ ƒë∆∞·ª£c l∆∞u ƒë·ªÉ d√πng offline!`);

        setTimeout(() => {
            showRandomCharacterImage();
            showRandomCharacterQuote();
        }, 300);
    } else {
        alert("‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu, ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.");
    }
}

async function fetchCharacterImages(character) {
    const imageRef = db.collection("characterImages").doc(character);
    const imageDoc = await imageRef.get();

    if (imageDoc.exists) {
        console.log(`üì∑ ·∫¢nh c·ªßa ${character} ƒë√£ t·∫£i t·ª´ Firestore.`);
        return imageDoc.data().images || [];
    }
    
    console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh c·ªßa ${character}, d√πng ·∫£nh m·∫∑c ƒë·ªãnh.`);
    return ["https://i.imgur.com/default.png"];
}

async function fetchCharacterQuotes(character) {
    const quoteRef = db.collection("characterQuotes").doc(character);
    const quoteDoc = await quoteRef.get();

    if (quoteDoc.exists) {
        console.log(`üí¨ Tho·∫°i c·ªßa ${character} ƒë√£ t·∫£i t·ª´ Firestore.`);
        return quoteDoc.data().quotes || [];
    }
    
    console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tho·∫°i c·ªßa ${character}, d√πng tho·∫°i m·∫∑c ƒë·ªãnh.`);
    return ["Xin ch√†o! T√¥i l√† tr·ª£ th·ªß c·ªßa b·∫°n!"];
}

async function showRandomCharacterImage() {
    const character = localStorage.getItem("selectedCharacter") || "V∆∞∆°ng";
    let images = JSON.parse(localStorage.getItem(`images_${character}`)) || [];

    if (images.length === 0) {
        images = await fetchCharacterImages(character);
        localStorage.setItem(`images_${character}`, JSON.stringify(images));
    }

    const randomImage = images[Math.floor(Math.random() * images.length)];
    document.getElementById("callout-avatar").src = randomImage;

    console.log(`üñºÔ∏è Hi·ªÉn th·ªã ·∫£nh nh√¢n v·∫≠t: ${character} - ${randomImage}`);
}

async function showRandomCharacterQuote() {
    const character = localStorage.getItem("selectedCharacter") || "V∆∞∆°ng";
    let dialogues = JSON.parse(localStorage.getItem(`dialogues_${character}`)) || [];

    if (dialogues.length === 0) {
        dialogues = await fetchCharacterQuotes(character);
        localStorage.setItem(`dialogues_${character}`, JSON.stringify(dialogues));
    }

    const randomDialogue = dialogues[Math.floor(Math.random() * dialogues.length)];
    document.getElementById("callout-bubble").innerText = randomDialogue;

    console.log(`üí¨ Hi·ªÉn th·ªã tho·∫°i nh√¢n v·∫≠t: ${character} - "${randomDialogue}"`);
}

async function setSelectedCharacter() {
    const characterSelect = document.getElementById("character-select");
    const selectedCharacter = characterSelect?.value || "V∆∞∆°ng";

    console.log(`üîÑ Ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn nh√¢n v·∫≠t: ${selectedCharacter}`);

    // üî• Lu√¥n l∆∞u v√†o LocalStorage
    localStorage.setItem("selectedCharacter", selectedCharacter);

    const username = localStorage.getItem("username");

    if (username) {
        // üî• N·∫øu user ƒë√£ ƒëƒÉng nh·∫≠p, c·∫≠p nh·∫≠t Firestore
        const userRef = db.collection("users").doc(username);
        await userRef.set({ bias: selectedCharacter }, { merge: true });
    }

    // üî• T·∫£i d·ªØ li·ªáu nh√¢n v·∫≠t m·ªõi
    await downloadCharacterData();
    await checkUserPoints(); // üî• Ki·ªÉm tra & hi·ªÉn th·ªã √¥ nh·∫≠p tho·∫°i
}

async function checkUserPoints() {
    const username = localStorage.getItem("username");
    if (!username) {
        return;
    }

    const selectedCharacter = localStorage.getItem("selectedCharacter") || "V∆∞∆°ng";
    const userRef = db.collection("users").doc(username);
    const userDoc = await userRef.get();

    let totalPoints = userDoc.exists ? (userDoc.data().totalScore || 0) : 0;
    console.log(`üìù T·ªïng ƒëi·ªÉm c·ªßa ${username}: ${totalPoints}`);

    const allowedQuotes = Math.floor(totalPoints / 1000);
    console.log(`üí¨ S·ªë √¥ tho·∫°i ƒë∆∞·ª£c ph√©p nh·∫≠p: ${allowedQuotes}`);

    // üî• L·∫•y tho·∫°i ƒë√£ l∆∞u v√† hi·ªÉn th·ªã
    const existingQuotes = await fetchUserQuotes(selectedCharacter, username);
    
    if (existingQuotes.length > 0) {
        console.log(`‚úÖ ƒê√£ t√¨m th·∫•y tho·∫°i c≈© c·ªßa ${selectedCharacter}, hi·ªÉn th·ªã ngay.`);
        displayQuoteInputs(existingQuotes, allowedQuotes);
        return;
    }

    if (allowedQuotes > 0) {
        console.log(`‚úÖ User c√≥ ${totalPoints} ƒëi·ªÉm, ƒë·ªß ƒëi·ªÅu ki·ªán nh·∫≠p tho·∫°i.`);
        displayQuoteInputs([], allowedQuotes);
    } else {
        console.log(`‚ùå User ch∆∞a c√≥ ƒë·ªß ƒëi·ªÉm (${totalPoints} ƒëi·ªÉm), ·∫©n √¥ nh·∫≠p tho·∫°i.`);
        document.getElementById("custom-quote-section").style.display = "none";
    }
}


function displayQuoteInputs(existingQuotes, allowedQuotes) {
    const customQuoteSection = document.getElementById("custom-quote-section");
    const quoteMessage = document.getElementById("quote-message");
    const inputField = document.getElementById("custom-quote"); // √î nh·∫≠p tho·∫°i

    // üî• N·∫øu user ch∆∞a ƒë·ªß ƒëi·ªÉm v√† ch∆∞a c√≥ tho·∫°i, ·∫©n ph·∫ßn nh·∫≠p tho·∫°i
    if (allowedQuotes === 0 && existingQuotes.length === 0) {
        customQuoteSection.style.display = "none";
        return;
    }

    // üî• Hi·ªÉn th·ªã ph·∫ßn nh·∫≠p tho·∫°i
    customQuoteSection.style.display = "block";

    // üî• N·∫øu ƒë√£ c√≥ tho·∫°i, hi·ªÉn th·ªã l·∫°i
    if (existingQuotes.length > 0) {
        quoteMessage.innerText = "Tho·∫°i ƒë√£ nh·∫≠p tr∆∞·ªõc ƒë√≥:";
        inputField.value = existingQuotes[0] || ""; // Hi·ªÉn th·ªã c√¢u tho·∫°i ƒë√£ nh·∫≠p
    } else {
        quoteMessage.innerText = `üí¨ B·∫°n c√≥ th·ªÉ nh·∫≠p t·ªëi ƒëa ${allowedQuotes} c√¢u tho·∫°i.`;
        inputField.value = ""; // N·∫øu ch∆∞a nh·∫≠p, ƒë·ªÉ input r·ªóng
    }
}



async function submitCustomQuotes() {
    const username = localStorage.getItem("username");
    if (!username) {
        return;
    }

    const selectedCharacter = localStorage.getItem("selectedCharacter") || "V∆∞∆°ng";
    const quoteInputs = document.querySelectorAll(".custom-quote-input");

    const quotes = [];
    quoteInputs.forEach(input => {
        if (input.value.trim() !== "") {
            quotes.push(input.value.trim());
        }
    });

    if (quotes.length === 0) {
        alert("‚ö†Ô∏è B·∫°n ch∆∞a nh·∫≠p c√¢u tho·∫°i n√†o.");
        return;
    }

    try {
        const userQuoteRef = db.collection("userQuotes").doc(username);
        await userQuoteRef.set({ [selectedCharacter]: quotes }, { merge: true });

        console.log(`‚úÖ ƒê√£ l∆∞u tho·∫°i cho ${selectedCharacter}: ${JSON.stringify(quotes)}`);
        alert("‚úÖ Tho·∫°i ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");
    } catch (error) {
        console.error("‚ùå L·ªói khi l∆∞u tho·∫°i:", error);
        alert("‚ùå ƒê√£ x·∫£y ra l·ªói khi l∆∞u tho·∫°i, th·ª≠ l·∫°i sau.");
    }
}

async function fetchUserQuotes(character, username) {
    try {
        console.log(`üì• ƒêang l·∫•y tho·∫°i c·ªßa ${character} cho user ${username}...`);

        const docRef = db.collection("characterQuotes").doc(character);
        const doc = await docRef.get();

        if (doc.exists) {
            const data = doc.data();
            const userQuotes = data.userQuotes || {};  // üü¢ Object ch·ª©a tho·∫°i user nh·∫≠p
            //const defaultQuotes = data.quotes || [];   // üü¢ Danh s√°ch tho·∫°i m·∫∑c ƒë·ªãnh
            
            const userQuote = userQuotes[username] || "";  // üî• Tho·∫°i user ƒë√£ nh·∫≠p (n·∫øu c√≥)

            console.log(`‚úÖ Tho·∫°i user ƒë√£ t·∫£i: ${userQuote}`);
            //console.log(`‚úÖ Tho·∫°i m·∫∑c ƒë·ªãnh ƒë√£ t·∫£i:`, defaultQuotes);

            return userQuote //? [userQuote] : defaultQuotes; // N·∫øu user c√≥ tho·∫°i th√¨ l·∫•y, n·∫øu kh√¥ng th√¨ d√πng m·∫∑c ƒë·ªãnh
        } else {
            console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tho·∫°i c·ªßa ${character} trong database.`);
            return [];
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y tho·∫°i user:", error);
        return [];
    }
}
