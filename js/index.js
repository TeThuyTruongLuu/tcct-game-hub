/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Wait for the deviceready event before using any of Cordova's device APIs.
// See https://cordova.apache.org/docs/en/latest/cordova/events/events.html#deviceready
document.addEventListener('deviceready', onDeviceReady, false);

function onDeviceReady() {
    // Cordova is now initialized. Have fun!

    console.log('Running cordova-' + cordova.platformId + '@' + cordova.version);
    document.getElementById('deviceready').classList.add('ready');
}

// Ki·ªÉm tra n·∫øu Firebase ƒë√£ kh·ªüi t·∫°o
if (!firebase.apps.length) {
    const firebaseConfig = {
        apiKey: "AIzaSyBtpLSSNBj9lHtzibLh5QSRAPg3iQ46Q3g",
        authDomain: "tcct-minigames.firebaseapp.com",
        projectId: "tcct-minigames",
        storageBucket: "tcct-minigames.firebasestorage.app",
        messagingSenderId: "604780847536",
        appId: "1:604780847536:web:f8015bde5ef469b04c7675",
        measurementId: "G-1GGDZR6VY5"
    };

    firebase.initializeApp(firebaseConfig);
    console.log("üî• Firebase ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o trong index.js!");
}

// L·∫•y Firestore
const db = firebase.firestore();

// ƒê·∫£m b·∫£o script ch·ªâ ch·∫°y sau khi DOM ƒë√£ load
document.addEventListener("DOMContentLoaded", function () {
    console.log("üî• DOM ƒë√£ load xong!");

    // Ki·ªÉm tra n·∫øu Firebase ƒë√£ kh·ªüi t·∫°o
    if (!firebase.apps.length) {
        console.error("‚ùå Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!");
        return;
    }

    // Ki·ªÉm tra n·∫øu c√°c button c√≥ t·ªìn t·∫°i
    const startButton = document.getElementById("start-button");
    const playWithoutLoginButton = document.getElementById("play-without-login");

    if (startButton) {
        startButton.addEventListener("click", async () => {
            const codeInput = document.getElementById("code-input").value.trim();
            const nicknameInput = document.getElementById("nickname-input").value.trim();

            if (codeInput !== "TCCT" || !nicknameInput) {
                alert("Nh·∫≠p ƒë√∫ng m√£ 'TCCT' v√† ƒëi·ªÅn t√™n h·ª£p l·ªá nha b·ªì ∆°i.");
                return;
            }

            console.log(`üìå ƒêƒÉng nh·∫≠p v·ªõi t√™n: ${nicknameInput}`);

            const userRef = db.collection("users").doc(nicknameInput);
            const userDoc = await userRef.get();

            if (userDoc.exists) {
                alert(`Ch√†o m·ª´ng tr·ªü l·∫°i, ${nicknameInput}!`);
            } else {
                await userRef.set({ username: nicknameInput });
                alert(`T·∫°o t√†i kho·∫£n th√†nh c√¥ng! Xin ch√†o, ${nicknameInput}.`);
            }

            localStorage.setItem("username", nicknameInput);

            // ·∫®n modal v√† hi·ªÉn th·ªã game
            document.getElementById("login-modal").style.display = "none";
            document.getElementById("welcome-message").style.display = "block";
            document.getElementById("display-name").innerText = nicknameInput;

            document.querySelector(".points").style.display = "block";
            document.querySelector(".scoreboard-container").style.display = "flex";
            document.querySelector(".game-list").style.display = "grid";
            document.getElementById("scoreboard").style.display = "block";
        });
    } else {
        console.error("‚ùå N√∫t 'B·∫Øt ƒë·∫ßu' kh√¥ng t·ªìn t·∫°i!");
    }

    if (playWithoutLoginButton) {
        playWithoutLoginButton.addEventListener("click", () => {
            console.log("üéÆ Ch∆°i kh√¥ng ƒëƒÉng nh·∫≠p");

            document.getElementById("login-modal").style.display = "none";
            document.querySelector(".game-list").style.display = "grid";
            document.querySelector(".points").style.display = "none";
            document.querySelector(".scoreboard-container").style.display = "none";
            document.getElementById("scoreboard").style.display = "none";

            alert("B·∫°n ƒëang ch∆°i m√† kh√¥ng ƒëƒÉng nh·∫≠p, ƒëi·ªÉm s·ªë s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u!");
        });
    } else {
        console.error("‚ùå N√∫t 'Ch∆°i kh√¥ng ƒëƒÉng nh·∫≠p' kh√¥ng t·ªìn t·∫°i!");
    }
});


async function saveHighScore(gameName, score) {
    const username = localStorage.getItem("username");
    if (!username) {
        alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ l∆∞u ƒëi·ªÉm!");
        return;
    }

    const userScoreRef = doc(db, "userScores", username + "_" + gameName);
    const userScoreDoc = await getDoc(userScoreRef);

    if (!userScoreDoc.exists() || score > userScoreDoc.data().score) {
        await setDoc(userScoreRef, {
            username,
            game: gameName,
            score,
            updatedAt: new Date().toISOString()
        });
    }
}


async function showPersonalScores() {
    const username = localStorage.getItem("username");
    if (!username) {
        alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p!");
        return;
    }

    const q = query(collection(db, "userScores"));
    const querySnapshot = await getDocs(q);

    let html = "<h2>B·∫£ng ƒëi·ªÉm c√° nh√¢n</h2><table><tr><th>Game</th><th>ƒêi·ªÉm cao nh·∫•t</th><th>Th·ªùi gian</th></tr>";
    querySnapshot.forEach((doc) => {
        if (doc.data().username === username) {
            html += `<tr><td>${doc.data().game}</td><td>${doc.data().score}</td><td>${doc.data().updatedAt}</td></tr>`;
        }
    });
    html += "</table>";

    document.getElementById("scoreboard").innerHTML = html;
}


async function showLeaderboard() {
    let html = "<h2>B·∫£ng k·ª∑ l·ª•c</h2>";

    const gameNames = ["2048", "L·∫≠t h√¨nh", "Th·∫ßn quy·∫øt", "N·ªëi h√¨nh"];
    for (let game of gameNames) {
        html += `<h3>${game}</h3><table><tr><th>Ng∆∞·ªùi ch∆°i</th><th>ƒêi·ªÉm</th></tr>`;
        const q = query(collection(db, "userScores"), where("game", "==", game), orderBy("score", "desc"), limit(10));
        const querySnapshot = await getDocs(q);

        querySnapshot.forEach((doc) => {
            html += `<tr><td>${doc.data().username}</td><td>${doc.data().score}</td></tr>`;
        });

        html += "</table>";
    }

    document.getElementById("scoreboard").innerHTML = html;
}

